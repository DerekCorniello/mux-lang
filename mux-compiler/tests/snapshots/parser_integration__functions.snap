---
source: mux-compiler/tests/parser_integration.rs
assertion_line: 83
expression: ast_string
---
"Function(\n    FunctionNode {\n        name: \"add\",\n        type_params: [],\n        params: [\n            Param {\n                name: \"a\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Int,\n                    ),\n                    span: Span {\n                        row_start: 2,\n                        row_end: Some(\n                            2,\n                        ),\n                        col_start: 10,\n                        col_end: Some(\n                            13,\n                        ),\n                    },\n                },\n            },\n            Param {\n                name: \"b\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Int,\n                    ),\n                    span: Span {\n                        row_start: 2,\n                        row_end: Some(\n                            2,\n                        ),\n                        col_start: 17,\n                        col_end: Some(\n                            20,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Primitive(\n                Int,\n            ),\n            span: Span {\n                row_start: 2,\n                row_end: Some(\n                    2,\n                ),\n                col_start: 32,\n                col_end: Some(\n                    35,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: Return(\n                    Some(\n                        ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Identifier(\n                                        \"a\",\n                                    ),\n                                    span: Span {\n                                        row_start: 3,\n                                        row_end: Some(\n                                            3,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            13,\n                                        ),\n                                    },\n                                },\n                                op: Add,\n                                right: ExpressionNode {\n                                    kind: Identifier(\n                                        \"b\",\n                                    ),\n                                    span: Span {\n                                        row_start: 3,\n                                        row_end: Some(\n                                            3,\n                                        ),\n                                        col_start: 16,\n                                        col_end: Some(\n                                            17,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 3,\n                                row_end: Some(\n                                    3,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    17,\n                                ),\n                            },\n                        },\n                    ),\n                ),\n                span: Span {\n                    row_start: 3,\n                    row_end: Some(\n                        3,\n                    ),\n                    col_start: 12,\n                    col_end: Some(\n                        17,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 2,\n            row_end: Some(\n                3,\n            ),\n            col_start: 1,\n            col_end: Some(\n                17,\n            ),\n        },\n    },\n)\n\nFunction(\n    FunctionNode {\n        name: \"greet\",\n        type_params: [],\n        params: [\n            Param {\n                name: \"name\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Str,\n                    ),\n                    span: Span {\n                        row_start: 6,\n                        row_end: Some(\n                            6,\n                        ),\n                        col_start: 12,\n                        col_end: Some(\n                            18,\n                        ),\n                    },\n                },\n            },\n            Param {\n                name: \"times\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Int,\n                    ),\n                    span: Span {\n                        row_start: 6,\n                        row_end: Some(\n                            6,\n                        ),\n                        col_start: 25,\n                        col_end: Some(\n                            28,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Primitive(\n                Void,\n            ),\n            span: Span {\n                row_start: 6,\n                row_end: Some(\n                    6,\n                ),\n                col_start: 48,\n                col_end: Some(\n                    52,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: For {\n                    var: \"i\",\n                    var_type: TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 7,\n                            row_end: Some(\n                                7,\n                            ),\n                            col_start: 9,\n                            col_end: Some(\n                                12,\n                            ),\n                        },\n                    },\n                    iter: ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"range\",\n                                ),\n                                span: Span {\n                                    row_start: 7,\n                                    row_end: Some(\n                                        7,\n                                    ),\n                                    col_start: 18,\n                                    col_end: Some(\n                                        23,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            0,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 7,\n                                        row_end: Some(\n                                            7,\n                                        ),\n                                        col_start: 24,\n                                        col_end: Some(\n                                            25,\n                                        ),\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Identifier(\n                                        \"times\",\n                                    ),\n                                    span: Span {\n                                        row_start: 7,\n                                        row_end: Some(\n                                            7,\n                                        ),\n                                        col_start: 27,\n                                        col_end: Some(\n                                            32,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 7,\n                            row_end: Some(\n                                7,\n                            ),\n                            col_start: 18,\n                            col_end: Some(\n                                23,\n                            ),\n                        },\n                    },\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"print\",\n                                            ),\n                                            span: Span {\n                                                row_start: 7,\n                                                row_end: Some(\n                                                    7,\n                                                ),\n                                                col_start: 36,\n                                                col_end: Some(\n                                                    41,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Binary {\n                                                    left: ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"Hello \",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 7,\n                                                            row_end: Some(\n                                                                7,\n                                                            ),\n                                                            col_start: 42,\n                                                            col_end: Some(\n                                                                50,\n                                                            ),\n                                                        },\n                                                    },\n                                                    op: Add,\n                                                    right: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"name\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 7,\n                                                            row_end: Some(\n                                                                7,\n                                                            ),\n                                                            col_start: 53,\n                                                            col_end: Some(\n                                                                57,\n                                                            ),\n                                                        },\n                                                    },\n                                                },\n                                                span: Span {\n                                                    row_start: 7,\n                                                    row_end: Some(\n                                                        7,\n                                                    ),\n                                                    col_start: 42,\n                                                    col_end: Some(\n                                                        57,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 7,\n                                        row_end: Some(\n                                            7,\n                                        ),\n                                        col_start: 36,\n                                        col_end: Some(\n                                            41,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 7,\n                                row_end: Some(\n                                    7,\n                                ),\n                                col_start: 36,\n                                col_end: Some(\n                                    41,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 9,\n                    col_end: Some(\n                        41,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 6,\n            row_end: Some(\n                7,\n            ),\n            col_start: 1,\n            col_end: Some(\n                41,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"square\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        12,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Lambda {\n                    params: [\n                        Param {\n                            name: \"n\",\n                            type_: TypeNode {\n                                kind: Primitive(\n                                    Int,\n                                ),\n                                span: Span {\n                                    row_start: 11,\n                                    row_end: Some(\n                                        11,\n                                    ),\n                                    col_start: 21,\n                                    col_end: Some(\n                                        24,\n                                    ),\n                                },\n                            },\n                        },\n                    ],\n                    body: [\n                        StatementNode {\n                            kind: Return(\n                                Some(\n                                    ExpressionNode {\n                                        kind: Binary {\n                                            left: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"n\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 11,\n                                                    row_end: Some(\n                                                        11,\n                                                    ),\n                                                    col_start: 49,\n                                                    col_end: Some(\n                                                        50,\n                                                    ),\n                                                },\n                                            },\n                                            op: Multiply,\n                                            right: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"n\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 11,\n                                                    row_end: Some(\n                                                        11,\n                                                    ),\n                                                    col_start: 53,\n                                                    col_end: Some(\n                                                        54,\n                                                    ),\n                                                },\n                                            },\n                                        },\n                                        span: Span {\n                                            row_start: 11,\n                                            row_end: Some(\n                                                11,\n                                            ),\n                                            col_start: 49,\n                                            col_end: Some(\n                                                54,\n                                            ),\n                                        },\n                                    },\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 49,\n                                col_end: Some(\n                                    54,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 15,\n                    col_end: Some(\n                        54,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 11,\n            row_end: Some(\n                11,\n            ),\n            col_start: 1,\n            col_end: Some(\n                54,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"doubled\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 12,\n                    row_end: Some(\n                        12,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        13,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Lambda {\n                    params: [\n                        Param {\n                            name: \"x\",\n                            type_: TypeNode {\n                                kind: Primitive(\n                                    Float,\n                                ),\n                                span: Span {\n                                    row_start: 12,\n                                    row_end: Some(\n                                        12,\n                                    ),\n                                    col_start: 22,\n                                    col_end: Some(\n                                        27,\n                                    ),\n                                },\n                            },\n                        },\n                    ],\n                    body: [\n                        StatementNode {\n                            kind: Return(\n                                Some(\n                                    ExpressionNode {\n                                        kind: Binary {\n                                            left: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"x\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 12,\n                                                    row_end: Some(\n                                                        12,\n                                                    ),\n                                                    col_start: 54,\n                                                    col_end: Some(\n                                                        55,\n                                                    ),\n                                                },\n                                            },\n                                            op: Multiply,\n                                            right: ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        2,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 12,\n                                                    row_end: Some(\n                                                        12,\n                                                    ),\n                                                    col_start: 58,\n                                                    col_end: Some(\n                                                        59,\n                                                    ),\n                                                },\n                                            },\n                                        },\n                                        span: Span {\n                                            row_start: 12,\n                                            row_end: Some(\n                                                12,\n                                            ),\n                                            col_start: 54,\n                                            col_end: Some(\n                                                59,\n                                            ),\n                                        },\n                                    },\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 12,\n                                row_end: Some(\n                                    12,\n                                ),\n                                col_start: 54,\n                                col_end: Some(\n                                    59,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 12,\n                    row_end: Some(\n                        12,\n                    ),\n                    col_start: 16,\n                    col_end: Some(\n                        59,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 12,\n            row_end: Some(\n                12,\n            ),\n            col_start: 1,\n            col_end: Some(\n                59,\n            ),\n        },\n    },\n)\n\n"
