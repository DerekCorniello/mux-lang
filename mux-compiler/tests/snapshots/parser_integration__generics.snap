---
source: tests/parser_integration.rs
expression: ast_string
---
"Function(\n    FunctionNode {\n        name: \"max\",\n        type_params: [\n            (\n                \"T\",\n                [\n                    TraitBound {\n                        name: \"comparable\",\n                        type_params: [],\n                    },\n                ],\n            ),\n        ],\n        params: [\n            Param {\n                name: \"a\",\n                type_: TypeNode {\n                    kind: Named(\n                        \"T\",\n                        [],\n                    ),\n                    span: Span {\n                        row_start: 2,\n                        row_end: Some(\n                            2,\n                        ),\n                        col_start: 27,\n                        col_end: Some(\n                            28,\n                        ),\n                    },\n                },\n            },\n            Param {\n                name: \"b\",\n                type_: TypeNode {\n                    kind: Named(\n                        \"T\",\n                        [],\n                    ),\n                    span: Span {\n                        row_start: 2,\n                        row_end: Some(\n                            2,\n                        ),\n                        col_start: 32,\n                        col_end: Some(\n                            33,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Named(\n                \"T\",\n                [],\n            ),\n            span: Span {\n                row_start: 2,\n                row_end: Some(\n                    2,\n                ),\n                col_start: 45,\n                col_end: Some(\n                    46,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: If {\n                    cond: ExpressionNode {\n                        kind: Binary {\n                            left: ExpressionNode {\n                                kind: Identifier(\n                                    \"a\",\n                                ),\n                                span: Span {\n                                    row_start: 3,\n                                    row_end: Some(\n                                        3,\n                                    ),\n                                    col_start: 8,\n                                    col_end: Some(\n                                        9,\n                                    ),\n                                },\n                            },\n                            op: Greater,\n                            right: ExpressionNode {\n                                kind: Identifier(\n                                    \"b\",\n                                ),\n                                span: Span {\n                                    row_start: 3,\n                                    row_end: Some(\n                                        3,\n                                    ),\n                                    col_start: 12,\n                                    col_end: Some(\n                                        13,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 3,\n                            row_end: Some(\n                                3,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                13,\n                            ),\n                        },\n                    },\n                    then_block: [\n                        StatementNode {\n                            kind: Return(\n                                Some(\n                                    ExpressionNode {\n                                        kind: Identifier(\n                                            \"a\",\n                                        ),\n                                        span: Span {\n                                            row_start: 4,\n                                            row_end: Some(\n                                                4,\n                                            ),\n                                            col_start: 16,\n                                            col_end: Some(\n                                                17,\n                                            ),\n                                        },\n                                    },\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 4,\n                                row_end: Some(\n                                    4,\n                                ),\n                                col_start: 16,\n                                col_end: Some(\n                                    17,\n                                ),\n                            },\n                        },\n                    ],\n                    else_block: None,\n                },\n                span: Span {\n                    row_start: 3,\n                    row_end: Some(\n                        4,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        17,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Return(\n                    Some(\n                        ExpressionNode {\n                            kind: Identifier(\n                                \"b\",\n                            ),\n                            span: Span {\n                                row_start: 6,\n                                row_end: Some(\n                                    6,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    13,\n                                ),\n                            },\n                        },\n                    ),\n                ),\n                span: Span {\n                    row_start: 6,\n                    row_end: Some(\n                        6,\n                    ),\n                    col_start: 12,\n                    col_end: Some(\n                        13,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 2,\n            row_end: Some(\n                6,\n            ),\n            col_start: 1,\n            col_end: Some(\n                13,\n            ),\n        },\n    },\n)\n\nClass {\n    name: \"Stack\",\n    type_params: [\n        (\n            \"T\",\n            [],\n        ),\n    ],\n    traits: [],\n    fields: [\n        Field {\n            name: \"items\",\n            type_: TypeNode {\n                kind: List(\n                    TypeNode {\n                        kind: Named(\n                            \"T\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 10,\n                            row_end: Some(\n                                10,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                11,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 10,\n                    row_end: Some(\n                        10,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n        },\n    ],\n    methods: [\n        FunctionNode {\n            name: \"push\",\n            type_params: [],\n            params: [\n                Param {\n                    name: \"item\",\n                    type_: TypeNode {\n                        kind: Named(\n                            \"T\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 11,\n                            row_end: Some(\n                                11,\n                            ),\n                            col_start: 15,\n                            col_end: Some(\n                                16,\n                            ),\n                        },\n                    },\n                },\n            ],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Void,\n                ),\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 31,\n                    col_end: Some(\n                        35,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: FieldAccess {\n                                        expr: ExpressionNode {\n                                            kind: Identifier(\n                                                \"items\",\n                                            ),\n                                            span: Span {\n                                                row_start: 11,\n                                                row_end: Some(\n                                                    11,\n                                                ),\n                                                col_start: 38,\n                                                col_end: Some(\n                                                    43,\n                                                ),\n                                            },\n                                        },\n                                        field: \"append\",\n                                    },\n                                    span: Span {\n                                        row_start: 11,\n                                        row_end: Some(\n                                            11,\n                                        ),\n                                        col_start: 38,\n                                        col_end: Some(\n                                            50,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Identifier(\n                                            \"item\",\n                                        ),\n                                        span: Span {\n                                            row_start: 11,\n                                            row_end: Some(\n                                                11,\n                                            ),\n                                            col_start: 51,\n                                            col_end: Some(\n                                                55,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 38,\n                                col_end: Some(\n                                    50,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 11,\n                        row_end: Some(\n                            11,\n                        ),\n                        col_start: 38,\n                        col_end: Some(\n                            50,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 11,\n                row_end: Some(\n                    11,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    50,\n                ),\n            },\n        },\n        FunctionNode {\n            name: \"pop\",\n            type_params: [],\n            params: [],\n            return_type: TypeNode {\n                kind: Named(\n                    \"Optional\",\n                    [\n                        TypeNode {\n                            kind: Named(\n                                \"T\",\n                                [],\n                            ),\n                            span: Span {\n                                row_start: 12,\n                                row_end: Some(\n                                    12,\n                                ),\n                                col_start: 33,\n                                col_end: Some(\n                                    34,\n                                ),\n                            },\n                        },\n                    ],\n                ),\n                span: Span {\n                    row_start: 12,\n                    row_end: Some(\n                        12,\n                    ),\n                    col_start: 24,\n                    col_end: Some(\n                        32,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: If {\n                        cond: ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: FieldAccess {\n                                        expr: ExpressionNode {\n                                            kind: Identifier(\n                                                \"items\",\n                                            ),\n                                            span: Span {\n                                                row_start: 13,\n                                                row_end: Some(\n                                                    13,\n                                                ),\n                                                col_start: 12,\n                                                col_end: Some(\n                                                    17,\n                                                ),\n                                            },\n                                        },\n                                        field: \"isEmpty\",\n                                    },\n                                    span: Span {\n                                        row_start: 13,\n                                        row_end: Some(\n                                            13,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            25,\n                                        ),\n                                    },\n                                },\n                                args: [],\n                            },\n                            span: Span {\n                                row_start: 13,\n                                row_end: Some(\n                                    13,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    25,\n                                ),\n                            },\n                        },\n                        then_block: [\n                            StatementNode {\n                                kind: Return(\n                                    Some(\n                                        ExpressionNode {\n                                            kind: Identifier(\n                                                \"None\",\n                                            ),\n                                            span: Span {\n                                                row_start: 13,\n                                                row_end: Some(\n                                                    13,\n                                                ),\n                                                col_start: 37,\n                                                col_end: Some(\n                                                    41,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                ),\n                                span: Span {\n                                    row_start: 13,\n                                    row_end: Some(\n                                        13,\n                                    ),\n                                    col_start: 37,\n                                    col_end: Some(\n                                        41,\n                                    ),\n                                },\n                            },\n                        ],\n                        else_block: None,\n                    },\n                    span: Span {\n                        row_start: 13,\n                        row_end: Some(\n                            13,\n                        ),\n                        col_start: 9,\n                        col_end: Some(\n                            41,\n                        ),\n                    },\n                },\n                StatementNode {\n                    kind: Return(\n                        Some(\n                            ExpressionNode {\n                                kind: Call {\n                                    func: ExpressionNode {\n                                        kind: Identifier(\n                                            \"Some\",\n                                        ),\n                                        span: Span {\n                                            row_start: 14,\n                                            row_end: Some(\n                                                14,\n                                            ),\n                                            col_start: 16,\n                                            col_end: Some(\n                                                20,\n                                            ),\n                                        },\n                                    },\n                                    args: [\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: FieldAccess {\n                                                        expr: ExpressionNode {\n                                                            kind: Identifier(\n                                                                \"items\",\n                                                            ),\n                                                            span: Span {\n                                                                row_start: 14,\n                                                                row_end: Some(\n                                                                    14,\n                                                                ),\n                                                                col_start: 21,\n                                                                col_end: Some(\n                                                                    26,\n                                                                ),\n                                                            },\n                                                        },\n                                                        field: \"removeLast\",\n                                                    },\n                                                    span: Span {\n                                                        row_start: 14,\n                                                        row_end: Some(\n                                                            14,\n                                                        ),\n                                                        col_start: 21,\n                                                        col_end: Some(\n                                                            37,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [],\n                                            },\n                                            span: Span {\n                                                row_start: 14,\n                                                row_end: Some(\n                                                    14,\n                                                ),\n                                                col_start: 21,\n                                                col_end: Some(\n                                                    37,\n                                                ),\n                                            },\n                                        },\n                                    ],\n                                },\n                                span: Span {\n                                    row_start: 14,\n                                    row_end: Some(\n                                        14,\n                                    ),\n                                    col_start: 16,\n                                    col_end: Some(\n                                        20,\n                                    ),\n                                },\n                            },\n                        ),\n                    ),\n                    span: Span {\n                        row_start: 14,\n                        row_end: Some(\n                            14,\n                        ),\n                        col_start: 16,\n                        col_end: Some(\n                            20,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 12,\n                row_end: Some(\n                    14,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    20,\n                ),\n            },\n        },\n    ],\n    span: Span {\n        row_start: 9,\n        row_end: Some(\n            9,\n        ),\n        col_start: 1,\n        col_end: Some(\n            6,\n        ),\n    },\n}\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"s\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 18,\n                    row_end: Some(\n                        18,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        7,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: FieldAccess {\n                            expr: ExpressionNode {\n                                kind: Identifier(\n                                    \"Stack\",\n                                ),\n                                span: Span {\n                                    row_start: 18,\n                                    row_end: Some(\n                                        18,\n                                    ),\n                                    col_start: 10,\n                                    col_end: Some(\n                                        15,\n                                    ),\n                                },\n                            },\n                            field: \"new\",\n                        },\n                        span: Span {\n                            row_start: 18,\n                            row_end: Some(\n                                18,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                24,\n                            ),\n                        },\n                    },\n                    args: [],\n                },\n                span: Span {\n                    row_start: 18,\n                    row_end: Some(\n                        18,\n                    ),\n                    col_start: 10,\n                    col_end: Some(\n                        24,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 18,\n            row_end: Some(\n                18,\n            ),\n            col_start: 1,\n            col_end: Some(\n                24,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: FieldAccess {\n                            expr: ExpressionNode {\n                                kind: Identifier(\n                                    \"s\",\n                                ),\n                                span: Span {\n                                    row_start: 19,\n                                    row_end: Some(\n                                        19,\n                                    ),\n                                    col_start: 1,\n                                    col_end: Some(\n                                        2,\n                                    ),\n                                },\n                            },\n                            field: \"push\",\n                        },\n                        span: Span {\n                            row_start: 19,\n                            row_end: Some(\n                                19,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                7,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    42,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 19,\n                                row_end: Some(\n                                    19,\n                                ),\n                                col_start: 8,\n                                col_end: Some(\n                                    10,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 19,\n                    row_end: Some(\n                        19,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        7,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 19,\n            row_end: Some(\n                19,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\n"
