---
source: mux-compiler/tests/parser_integration.rs
assertion_line: 83
expression: ast_string
---
"Statement(\n    StatementNode {\n        kind: AutoDecl(\n            \"x\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 2,\n                    row_end: Some(\n                        2,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        7,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Integer(\n                        5,\n                    ),\n                ),\n                span: Span {\n                    row_start: 2,\n                    row_end: Some(\n                        2,\n                    ),\n                    col_start: 10,\n                    col_end: Some(\n                        11,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 2,\n            row_end: Some(\n                2,\n            ),\n            col_start: 1,\n            col_end: Some(\n                11,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: If {\n            cond: ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"x\",\n                        ),\n                        span: Span {\n                            row_start: 3,\n                            row_end: Some(\n                                3,\n                            ),\n                            col_start: 4,\n                            col_end: Some(\n                                5,\n                            ),\n                        },\n                    },\n                    op: Greater,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                0,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 3,\n                            row_end: Some(\n                                3,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                9,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 3,\n                    row_end: Some(\n                        3,\n                    ),\n                    col_start: 4,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n            then_block: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 3,\n                                        row_end: Some(\n                                            3,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            17,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Literal(\n                                            String(\n                                                \"Positive\",\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 3,\n                                            row_end: Some(\n                                                3,\n                                            ),\n                                            col_start: 18,\n                                            col_end: Some(\n                                                28,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 3,\n                                row_end: Some(\n                                    3,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    17,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 3,\n                        row_end: Some(\n                            3,\n                        ),\n                        col_start: 12,\n                        col_end: Some(\n                            17,\n                        ),\n                    },\n                },\n            ],\n            else_block: Some(\n                [\n                    StatementNode {\n                        kind: Expression(\n                            ExpressionNode {\n                                kind: Call {\n                                    func: ExpressionNode {\n                                        kind: Identifier(\n                                            \"print\",\n                                        ),\n                                        span: Span {\n                                            row_start: 3,\n                                            row_end: Some(\n                                                3,\n                                            ),\n                                            col_start: 39,\n                                            col_end: Some(\n                                                44,\n                                            ),\n                                        },\n                                    },\n                                    args: [\n                                        ExpressionNode {\n                                            kind: Literal(\n                                                String(\n                                                    \"Non-positive\",\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 3,\n                                                row_end: Some(\n                                                    3,\n                                                ),\n                                                col_start: 45,\n                                                col_end: Some(\n                                                    59,\n                                                ),\n                                            },\n                                        },\n                                    ],\n                                },\n                                span: Span {\n                                    row_start: 3,\n                                    row_end: Some(\n                                        3,\n                                    ),\n                                    col_start: 39,\n                                    col_end: Some(\n                                        44,\n                                    ),\n                                },\n                            },\n                        ),\n                        span: Span {\n                            row_start: 3,\n                            row_end: Some(\n                                3,\n                            ),\n                            col_start: 39,\n                            col_end: Some(\n                                44,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n        span: Span {\n            row_start: 3,\n            row_end: Some(\n                3,\n            ),\n            col_start: 1,\n            col_end: Some(\n                44,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Match {\n            expr: ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"Some\",\n                        ),\n                        span: Span {\n                            row_start: 5,\n                            row_end: Some(\n                                5,\n                            ),\n                            col_start: 7,\n                            col_end: Some(\n                                11,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    15,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 5,\n                                row_end: Some(\n                                    5,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    14,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 5,\n                    row_end: Some(\n                        5,\n                    ),\n                    col_start: 7,\n                    col_end: Some(\n                        11,\n                    ),\n                },\n            },\n            arms: [\n                MatchArm {\n                    pattern: EnumVariant {\n                        name: \"Some\",\n                        args: [\n                            Identifier(\n                                \"v\",\n                            ),\n                        ],\n                    },\n                    guard: Some(\n                        ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Identifier(\n                                        \"v\",\n                                    ),\n                                    span: Span {\n                                        row_start: 6,\n                                        row_end: Some(\n                                            6,\n                                        ),\n                                        col_start: 16,\n                                        col_end: Some(\n                                            17,\n                                        ),\n                                    },\n                                },\n                                op: Greater,\n                                right: ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            10,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 6,\n                                        row_end: Some(\n                                            6,\n                                        ),\n                                        col_start: 20,\n                                        col_end: Some(\n                                            22,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 6,\n                                row_end: Some(\n                                    6,\n                                ),\n                                col_start: 16,\n                                col_end: Some(\n                                    22,\n                                ),\n                            },\n                        },\n                    ),\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"print\",\n                                            ),\n                                            span: Span {\n                                                row_start: 6,\n                                                row_end: Some(\n                                                    6,\n                                                ),\n                                                col_start: 25,\n                                                col_end: Some(\n                                                    30,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Binary {\n                                                    left: ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"Large: \",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 6,\n                                                            row_end: Some(\n                                                                6,\n                                                            ),\n                                                            col_start: 31,\n                                                            col_end: Some(\n                                                                40,\n                                                            ),\n                                                        },\n                                                    },\n                                                    op: Add,\n                                                    right: ExpressionNode {\n                                                        kind: Call {\n                                                            func: ExpressionNode {\n                                                                kind: FieldAccess {\n                                                                    expr: ExpressionNode {\n                                                                        kind: Identifier(\n                                                                            \"v\",\n                                                                        ),\n                                                                        span: Span {\n                                                                            row_start: 6,\n                                                                            row_end: Some(\n                                                                                6,\n                                                                            ),\n                                                                            col_start: 43,\n                                                                            col_end: Some(\n                                                                                44,\n                                                                            ),\n                                                                        },\n                                                                    },\n                                                                    field: \"to_string\",\n                                                                },\n                                                                span: Span {\n                                                                    row_start: 6,\n                                                                    row_end: Some(\n                                                                        6,\n                                                                    ),\n                                                                    col_start: 43,\n                                                                    col_end: Some(\n                                                                        54,\n                                                                    ),\n                                                                },\n                                                            },\n                                                            args: [],\n                                                        },\n                                                        span: Span {\n                                                            row_start: 6,\n                                                            row_end: Some(\n                                                                6,\n                                                            ),\n                                                            col_start: 43,\n                                                            col_end: Some(\n                                                                54,\n                                                            ),\n                                                        },\n                                                    },\n                                                },\n                                                span: Span {\n                                                    row_start: 6,\n                                                    row_end: Some(\n                                                        6,\n                                                    ),\n                                                    col_start: 31,\n                                                    col_end: Some(\n                                                        54,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 6,\n                                        row_end: Some(\n                                            6,\n                                        ),\n                                        col_start: 25,\n                                        col_end: Some(\n                                            30,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 6,\n                                row_end: Some(\n                                    6,\n                                ),\n                                col_start: 25,\n                                col_end: Some(\n                                    30,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                MatchArm {\n                    pattern: EnumVariant {\n                        name: \"Some\",\n                        args: [\n                            Identifier(\n                                \"v\",\n                            ),\n                        ],\n                    },\n                    guard: None,\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"print\",\n                                            ),\n                                            span: Span {\n                                                row_start: 7,\n                                                row_end: Some(\n                                                    7,\n                                                ),\n                                                col_start: 15,\n                                                col_end: Some(\n                                                    20,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Binary {\n                                                    left: ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"Small: \",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 7,\n                                                            row_end: Some(\n                                                                7,\n                                                            ),\n                                                            col_start: 21,\n                                                            col_end: Some(\n                                                                30,\n                                                            ),\n                                                        },\n                                                    },\n                                                    op: Add,\n                                                    right: ExpressionNode {\n                                                        kind: Call {\n                                                            func: ExpressionNode {\n                                                                kind: FieldAccess {\n                                                                    expr: ExpressionNode {\n                                                                        kind: Identifier(\n                                                                            \"v\",\n                                                                        ),\n                                                                        span: Span {\n                                                                            row_start: 7,\n                                                                            row_end: Some(\n                                                                                7,\n                                                                            ),\n                                                                            col_start: 33,\n                                                                            col_end: Some(\n                                                                                34,\n                                                                            ),\n                                                                        },\n                                                                    },\n                                                                    field: \"to_string\",\n                                                                },\n                                                                span: Span {\n                                                                    row_start: 7,\n                                                                    row_end: Some(\n                                                                        7,\n                                                                    ),\n                                                                    col_start: 33,\n                                                                    col_end: Some(\n                                                                        44,\n                                                                    ),\n                                                                },\n                                                            },\n                                                            args: [],\n                                                        },\n                                                        span: Span {\n                                                            row_start: 7,\n                                                            row_end: Some(\n                                                                7,\n                                                            ),\n                                                            col_start: 33,\n                                                            col_end: Some(\n                                                                44,\n                                                            ),\n                                                        },\n                                                    },\n                                                },\n                                                span: Span {\n                                                    row_start: 7,\n                                                    row_end: Some(\n                                                        7,\n                                                    ),\n                                                    col_start: 21,\n                                                    col_end: Some(\n                                                        44,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 7,\n                                        row_end: Some(\n                                            7,\n                                        ),\n                                        col_start: 15,\n                                        col_end: Some(\n                                            20,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 7,\n                                row_end: Some(\n                                    7,\n                                ),\n                                col_start: 15,\n                                col_end: Some(\n                                    20,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                MatchArm {\n                    pattern: EnumVariant {\n                        name: \"None\",\n                        args: [],\n                    },\n                    guard: None,\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"print\",\n                                            ),\n                                            span: Span {\n                                                row_start: 8,\n                                                row_end: Some(\n                                                    8,\n                                                ),\n                                                col_start: 12,\n                                                col_end: Some(\n                                                    17,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    String(\n                                                        \"None\",\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 8,\n                                                    row_end: Some(\n                                                        8,\n                                                    ),\n                                                    col_start: 18,\n                                                    col_end: Some(\n                                                        24,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 8,\n                                        row_end: Some(\n                                            8,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            17,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 8,\n                                row_end: Some(\n                                    8,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    17,\n                                ),\n                            },\n                        },\n                    ],\n                },\n            ],\n        },\n        span: Span {\n            row_start: 5,\n            row_end: Some(\n                5,\n            ),\n            col_start: 7,\n            col_end: Some(\n                11,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: For {\n            var: \"i\",\n            var_type: TypeNode {\n                kind: Primitive(\n                    Int,\n                ),\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        8,\n                    ),\n                },\n            },\n            iter: ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"range\",\n                        ),\n                        span: Span {\n                            row_start: 11,\n                            row_end: Some(\n                                11,\n                            ),\n                            col_start: 14,\n                            col_end: Some(\n                                19,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    0,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 20,\n                                col_end: Some(\n                                    21,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    3,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 23,\n                                col_end: Some(\n                                    24,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 14,\n                    col_end: Some(\n                        19,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 11,\n                                        row_end: Some(\n                                            11,\n                                        ),\n                                        col_start: 28,\n                                        col_end: Some(\n                                            33,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Call {\n                                            func: ExpressionNode {\n                                                kind: FieldAccess {\n                                                    expr: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"i\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 11,\n                                                            row_end: Some(\n                                                                11,\n                                                            ),\n                                                            col_start: 34,\n                                                            col_end: Some(\n                                                                35,\n                                                            ),\n                                                        },\n                                                    },\n                                                    field: \"to_string\",\n                                                },\n                                                span: Span {\n                                                    row_start: 11,\n                                                    row_end: Some(\n                                                        11,\n                                                    ),\n                                                    col_start: 34,\n                                                    col_end: Some(\n                                                        45,\n                                                    ),\n                                                },\n                                            },\n                                            args: [],\n                                        },\n                                        span: Span {\n                                            row_start: 11,\n                                            row_end: Some(\n                                                11,\n                                            ),\n                                            col_start: 34,\n                                            col_end: Some(\n                                                45,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 28,\n                                col_end: Some(\n                                    33,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 11,\n                        row_end: Some(\n                            11,\n                        ),\n                        col_start: 28,\n                        col_end: Some(\n                            33,\n                        ),\n                    },\n                },\n            ],\n        },\n        span: Span {\n            row_start: 11,\n            row_end: Some(\n                11,\n            ),\n            col_start: 5,\n            col_end: Some(\n                33,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: For {\n            var: \"j\",\n            var_type: TypeNode {\n                kind: Primitive(\n                    Int,\n                ),\n                span: Span {\n                    row_start: 13,\n                    row_end: Some(\n                        13,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        8,\n                    ),\n                },\n            },\n            iter: ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"range\",\n                        ),\n                        span: Span {\n                            row_start: 13,\n                            row_end: Some(\n                                13,\n                            ),\n                            col_start: 14,\n                            col_end: Some(\n                                19,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    0,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 13,\n                                row_end: Some(\n                                    13,\n                                ),\n                                col_start: 20,\n                                col_end: Some(\n                                    21,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    10,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 13,\n                                row_end: Some(\n                                    13,\n                                ),\n                                col_start: 23,\n                                col_end: Some(\n                                    25,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 13,\n                    row_end: Some(\n                        13,\n                    ),\n                    col_start: 14,\n                    col_end: Some(\n                        19,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: If {\n                        cond: ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Binary {\n                                        left: ExpressionNode {\n                                            kind: Identifier(\n                                                \"j\",\n                                            ),\n                                            span: Span {\n                                                row_start: 14,\n                                                row_end: Some(\n                                                    14,\n                                                ),\n                                                col_start: 8,\n                                                col_end: Some(\n                                                    9,\n                                                ),\n                                            },\n                                        },\n                                        op: Modulo,\n                                        right: ExpressionNode {\n                                            kind: Literal(\n                                                Integer(\n                                                    2,\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 14,\n                                                row_end: Some(\n                                                    14,\n                                                ),\n                                                col_start: 12,\n                                                col_end: Some(\n                                                    13,\n                                                ),\n                                            },\n                                        },\n                                    },\n                                    span: Span {\n                                        row_start: 14,\n                                        row_end: Some(\n                                            14,\n                                        ),\n                                        col_start: 8,\n                                        col_end: Some(\n                                            13,\n                                        ),\n                                    },\n                                },\n                                op: Equal,\n                                right: ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            0,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 14,\n                                        row_end: Some(\n                                            14,\n                                        ),\n                                        col_start: 17,\n                                        col_end: Some(\n                                            18,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 14,\n                                row_end: Some(\n                                    14,\n                                ),\n                                col_start: 8,\n                                col_end: Some(\n                                    18,\n                                ),\n                            },\n                        },\n                        then_block: [\n                            StatementNode {\n                                kind: Expression(\n                                    ExpressionNode {\n                                        kind: Call {\n                                            func: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"print\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 15,\n                                                    row_end: Some(\n                                                        15,\n                                                    ),\n                                                    col_start: 9,\n                                                    col_end: Some(\n                                                        14,\n                                                    ),\n                                                },\n                                            },\n                                            args: [\n                                                ExpressionNode {\n                                                    kind: Literal(\n                                                        String(\n                                                            \"even\",\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 15,\n                                                        row_end: Some(\n                                                            15,\n                                                        ),\n                                                        col_start: 15,\n                                                        col_end: Some(\n                                                            21,\n                                                        ),\n                                                    },\n                                                },\n                                            ],\n                                        },\n                                        span: Span {\n                                            row_start: 15,\n                                            row_end: Some(\n                                                15,\n                                            ),\n                                            col_start: 9,\n                                            col_end: Some(\n                                                14,\n                                            ),\n                                        },\n                                    },\n                                ),\n                                span: Span {\n                                    row_start: 15,\n                                    row_end: Some(\n                                        15,\n                                    ),\n                                    col_start: 9,\n                                    col_end: Some(\n                                        14,\n                                    ),\n                                },\n                            },\n                        ],\n                        else_block: Some(\n                            [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 17,\n                                                        row_end: Some(\n                                                            17,\n                                                        ),\n                                                        col_start: 9,\n                                                        col_end: Some(\n                                                            14,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"odd\",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 17,\n                                                            row_end: Some(\n                                                                17,\n                                                            ),\n                                                            col_start: 15,\n                                                            col_end: Some(\n                                                                20,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 17,\n                                                row_end: Some(\n                                                    17,\n                                                ),\n                                                col_start: 9,\n                                                col_end: Some(\n                                                    14,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 17,\n                                        row_end: Some(\n                                            17,\n                                        ),\n                                        col_start: 9,\n                                        col_end: Some(\n                                            14,\n                                        ),\n                                    },\n                                },\n                            ],\n                        ),\n                    },\n                    span: Span {\n                        row_start: 14,\n                        row_end: Some(\n                            17,\n                        ),\n                        col_start: 5,\n                        col_end: Some(\n                            14,\n                        ),\n                    },\n                },\n            ],\n        },\n        span: Span {\n            row_start: 13,\n            row_end: Some(\n                17,\n            ),\n            col_start: 5,\n            col_end: Some(\n                14,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: While {\n            cond: ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"x\",\n                        ),\n                        span: Span {\n                            row_start: 21,\n                            row_end: Some(\n                                21,\n                            ),\n                            col_start: 7,\n                            col_end: Some(\n                                8,\n                            ),\n                        },\n                    },\n                    op: Greater,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                0,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 21,\n                            row_end: Some(\n                                21,\n                            ),\n                            col_start: 11,\n                            col_end: Some(\n                                12,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 21,\n                    row_end: Some(\n                        21,\n                    ),\n                    col_start: 7,\n                    col_end: Some(\n                        12,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Identifier(\n                                        \"x\",\n                                    ),\n                                    span: Span {\n                                        row_start: 21,\n                                        row_end: Some(\n                                            21,\n                                        ),\n                                        col_start: 15,\n                                        col_end: Some(\n                                            16,\n                                        ),\n                                    },\n                                },\n                                op: SubtractAssign,\n                                right: ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            1,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 21,\n                                        row_end: Some(\n                                            21,\n                                        ),\n                                        col_start: 20,\n                                        col_end: Some(\n                                            21,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 21,\n                                row_end: Some(\n                                    21,\n                                ),\n                                col_start: 15,\n                                col_end: Some(\n                                    21,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 21,\n                        row_end: Some(\n                            21,\n                        ),\n                        col_start: 15,\n                        col_end: Some(\n                            21,\n                        ),\n                    },\n                },\n            ],\n        },\n        span: Span {\n            row_start: 21,\n            row_end: Some(\n                21,\n            ),\n            col_start: 7,\n            col_end: Some(\n                21,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: If {\n            cond: ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"x\",\n                        ),\n                        span: Span {\n                            row_start: 23,\n                            row_end: Some(\n                                23,\n                            ),\n                            col_start: 4,\n                            col_end: Some(\n                                5,\n                            ),\n                        },\n                    },\n                    op: Less,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                0,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 23,\n                            row_end: Some(\n                                23,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                9,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 23,\n                    row_end: Some(\n                        23,\n                    ),\n                    col_start: 4,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n            then_block: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 24,\n                                        row_end: Some(\n                                            24,\n                                        ),\n                                        col_start: 5,\n                                        col_end: Some(\n                                            10,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Literal(\n                                            String(\n                                                \"Negative\",\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 24,\n                                            row_end: Some(\n                                                24,\n                                            ),\n                                            col_start: 11,\n                                            col_end: Some(\n                                                21,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 24,\n                                row_end: Some(\n                                    24,\n                                ),\n                                col_start: 5,\n                                col_end: Some(\n                                    10,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 24,\n                        row_end: Some(\n                            24,\n                        ),\n                        col_start: 5,\n                        col_end: Some(\n                            10,\n                        ),\n                    },\n                },\n            ],\n            else_block: None,\n        },\n        span: Span {\n            row_start: 23,\n            row_end: Some(\n                24,\n            ),\n            col_start: 1,\n            col_end: Some(\n                10,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: If {\n            cond: ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"x\",\n                        ),\n                        span: Span {\n                            row_start: 27,\n                            row_end: Some(\n                                27,\n                            ),\n                            col_start: 4,\n                            col_end: Some(\n                                5,\n                            ),\n                        },\n                    },\n                    op: Equal,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                0,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 27,\n                            row_end: Some(\n                                27,\n                            ),\n                            col_start: 9,\n                            col_end: Some(\n                                10,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 27,\n                    row_end: Some(\n                        27,\n                    ),\n                    col_start: 4,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n            then_block: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 28,\n                                        row_end: Some(\n                                            28,\n                                        ),\n                                        col_start: 5,\n                                        col_end: Some(\n                                            10,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Literal(\n                                            String(\n                                                \"Zero\",\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 28,\n                                            row_end: Some(\n                                                28,\n                                            ),\n                                            col_start: 11,\n                                            col_end: Some(\n                                                17,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 28,\n                                row_end: Some(\n                                    28,\n                                ),\n                                col_start: 5,\n                                col_end: Some(\n                                    10,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 28,\n                        row_end: Some(\n                            28,\n                        ),\n                        col_start: 5,\n                        col_end: Some(\n                            10,\n                        ),\n                    },\n                },\n            ],\n            else_block: Some(\n                [\n                    StatementNode {\n                        kind: Expression(\n                            ExpressionNode {\n                                kind: Call {\n                                    func: ExpressionNode {\n                                        kind: Identifier(\n                                            \"print\",\n                                        ),\n                                        span: Span {\n                                            row_start: 30,\n                                            row_end: Some(\n                                                30,\n                                            ),\n                                            col_start: 5,\n                                            col_end: Some(\n                                                10,\n                                            ),\n                                        },\n                                    },\n                                    args: [\n                                        ExpressionNode {\n                                            kind: Literal(\n                                                String(\n                                                    \"Non-zero\",\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 30,\n                                                row_end: Some(\n                                                    30,\n                                                ),\n                                                col_start: 11,\n                                                col_end: Some(\n                                                    21,\n                                                ),\n                                            },\n                                        },\n                                    ],\n                                },\n                                span: Span {\n                                    row_start: 30,\n                                    row_end: Some(\n                                        30,\n                                    ),\n                                    col_start: 5,\n                                    col_end: Some(\n                                        10,\n                                    ),\n                                },\n                            },\n                        ),\n                        span: Span {\n                            row_start: 30,\n                            row_end: Some(\n                                30,\n                            ),\n                            col_start: 5,\n                            col_end: Some(\n                                10,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n        span: Span {\n            row_start: 27,\n            row_end: Some(\n                30,\n            ),\n            col_start: 1,\n            col_end: Some(\n                10,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: If {\n            cond: ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"x\",\n                        ),\n                        span: Span {\n                            row_start: 33,\n                            row_end: Some(\n                                33,\n                            ),\n                            col_start: 4,\n                            col_end: Some(\n                                5,\n                            ),\n                        },\n                    },\n                    op: Greater,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                10,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 33,\n                            row_end: Some(\n                                33,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                10,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 33,\n                    row_end: Some(\n                        33,\n                    ),\n                    col_start: 4,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n            then_block: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 34,\n                                        row_end: Some(\n                                            34,\n                                        ),\n                                        col_start: 5,\n                                        col_end: Some(\n                                            10,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Literal(\n                                            String(\n                                                \"gt10\",\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 34,\n                                            row_end: Some(\n                                                34,\n                                            ),\n                                            col_start: 11,\n                                            col_end: Some(\n                                                17,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 34,\n                                row_end: Some(\n                                    34,\n                                ),\n                                col_start: 5,\n                                col_end: Some(\n                                    10,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 34,\n                        row_end: Some(\n                            34,\n                        ),\n                        col_start: 5,\n                        col_end: Some(\n                            10,\n                        ),\n                    },\n                },\n            ],\n            else_block: Some(\n                [\n                    StatementNode {\n                        kind: If {\n                            cond: ExpressionNode {\n                                kind: Binary {\n                                    left: ExpressionNode {\n                                        kind: Identifier(\n                                            \"x\",\n                                        ),\n                                        span: Span {\n                                            row_start: 35,\n                                            row_end: Some(\n                                                35,\n                                            ),\n                                            col_start: 11,\n                                            col_end: Some(\n                                                12,\n                                            ),\n                                        },\n                                    },\n                                    op: Greater,\n                                    right: ExpressionNode {\n                                        kind: Literal(\n                                            Integer(\n                                                5,\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 35,\n                                            row_end: Some(\n                                                35,\n                                            ),\n                                            col_start: 15,\n                                            col_end: Some(\n                                                16,\n                                            ),\n                                        },\n                                    },\n                                },\n                                span: Span {\n                                    row_start: 35,\n                                    row_end: Some(\n                                        35,\n                                    ),\n                                    col_start: 11,\n                                    col_end: Some(\n                                        16,\n                                    ),\n                                },\n                            },\n                            then_block: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 36,\n                                                        row_end: Some(\n                                                            36,\n                                                        ),\n                                                        col_start: 5,\n                                                        col_end: Some(\n                                                            10,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"gt5\",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 36,\n                                                            row_end: Some(\n                                                                36,\n                                                            ),\n                                                            col_start: 11,\n                                                            col_end: Some(\n                                                                16,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 36,\n                                                row_end: Some(\n                                                    36,\n                                                ),\n                                                col_start: 5,\n                                                col_end: Some(\n                                                    10,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 36,\n                                        row_end: Some(\n                                            36,\n                                        ),\n                                        col_start: 5,\n                                        col_end: Some(\n                                            10,\n                                        ),\n                                    },\n                                },\n                            ],\n                            else_block: Some(\n                                [\n                                    StatementNode {\n                                        kind: Expression(\n                                            ExpressionNode {\n                                                kind: Call {\n                                                    func: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"print\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 38,\n                                                            row_end: Some(\n                                                                38,\n                                                            ),\n                                                            col_start: 5,\n                                                            col_end: Some(\n                                                                10,\n                                                            ),\n                                                        },\n                                                    },\n                                                    args: [\n                                                        ExpressionNode {\n                                                            kind: Literal(\n                                                                String(\n                                                                    \"other\",\n                                                                ),\n                                                            ),\n                                                            span: Span {\n                                                                row_start: 38,\n                                                                row_end: Some(\n                                                                    38,\n                                                                ),\n                                                                col_start: 11,\n                                                                col_end: Some(\n                                                                    18,\n                                                                ),\n                                                            },\n                                                        },\n                                                    ],\n                                                },\n                                                span: Span {\n                                                    row_start: 38,\n                                                    row_end: Some(\n                                                        38,\n                                                    ),\n                                                    col_start: 5,\n                                                    col_end: Some(\n                                                        10,\n                                                    ),\n                                                },\n                                            },\n                                        ),\n                                        span: Span {\n                                            row_start: 38,\n                                            row_end: Some(\n                                                38,\n                                            ),\n                                            col_start: 5,\n                                            col_end: Some(\n                                                10,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            ),\n                        },\n                        span: Span {\n                            row_start: 35,\n                            row_end: Some(\n                                38,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                10,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n        span: Span {\n            row_start: 33,\n            row_end: Some(\n                38,\n            ),\n            col_start: 1,\n            col_end: Some(\n                10,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: For {\n            var: \"j\",\n            var_type: TypeNode {\n                kind: Primitive(\n                    Int,\n                ),\n                span: Span {\n                    row_start: 41,\n                    row_end: Some(\n                        41,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        8,\n                    ),\n                },\n            },\n            iter: ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"range\",\n                        ),\n                        span: Span {\n                            row_start: 41,\n                            row_end: Some(\n                                41,\n                            ),\n                            col_start: 14,\n                            col_end: Some(\n                                19,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    0,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 41,\n                                row_end: Some(\n                                    41,\n                                ),\n                                col_start: 20,\n                                col_end: Some(\n                                    21,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    3,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 41,\n                                row_end: Some(\n                                    41,\n                                ),\n                                col_start: 23,\n                                col_end: Some(\n                                    24,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 41,\n                    row_end: Some(\n                        41,\n                    ),\n                    col_start: 14,\n                    col_end: Some(\n                        19,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: If {\n                        cond: ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Identifier(\n                                        \"j\",\n                                    ),\n                                    span: Span {\n                                        row_start: 42,\n                                        row_end: Some(\n                                            42,\n                                        ),\n                                        col_start: 8,\n                                        col_end: Some(\n                                            9,\n                                        ),\n                                    },\n                                },\n                                op: Equal,\n                                right: ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            1,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 42,\n                                        row_end: Some(\n                                            42,\n                                        ),\n                                        col_start: 13,\n                                        col_end: Some(\n                                            14,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 42,\n                                row_end: Some(\n                                    42,\n                                ),\n                                col_start: 8,\n                                col_end: Some(\n                                    14,\n                                ),\n                            },\n                        },\n                        then_block: [\n                            StatementNode {\n                                kind: Expression(\n                                    ExpressionNode {\n                                        kind: Call {\n                                            func: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"print\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 43,\n                                                    row_end: Some(\n                                                        43,\n                                                    ),\n                                                    col_start: 9,\n                                                    col_end: Some(\n                                                        14,\n                                                    ),\n                                                },\n                                            },\n                                            args: [\n                                                ExpressionNode {\n                                                    kind: Literal(\n                                                        String(\n                                                            \"one\",\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 43,\n                                                        row_end: Some(\n                                                            43,\n                                                        ),\n                                                        col_start: 15,\n                                                        col_end: Some(\n                                                            20,\n                                                        ),\n                                                    },\n                                                },\n                                            ],\n                                        },\n                                        span: Span {\n                                            row_start: 43,\n                                            row_end: Some(\n                                                43,\n                                            ),\n                                            col_start: 9,\n                                            col_end: Some(\n                                                14,\n                                            ),\n                                        },\n                                    },\n                                ),\n                                span: Span {\n                                    row_start: 43,\n                                    row_end: Some(\n                                        43,\n                                    ),\n                                    col_start: 9,\n                                    col_end: Some(\n                                        14,\n                                    ),\n                                },\n                            },\n                        ],\n                        else_block: Some(\n                            [\n                                StatementNode {\n                                    kind: If {\n                                        cond: ExpressionNode {\n                                            kind: Binary {\n                                                left: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"j\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 44,\n                                                        row_end: Some(\n                                                            44,\n                                                        ),\n                                                        col_start: 15,\n                                                        col_end: Some(\n                                                            16,\n                                                        ),\n                                                    },\n                                                },\n                                                op: Equal,\n                                                right: ExpressionNode {\n                                                    kind: Literal(\n                                                        Integer(\n                                                            0,\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 44,\n                                                        row_end: Some(\n                                                            44,\n                                                        ),\n                                                        col_start: 20,\n                                                        col_end: Some(\n                                                            21,\n                                                        ),\n                                                    },\n                                                },\n                                            },\n                                            span: Span {\n                                                row_start: 44,\n                                                row_end: Some(\n                                                    44,\n                                                ),\n                                                col_start: 15,\n                                                col_end: Some(\n                                                    21,\n                                                ),\n                                            },\n                                        },\n                                        then_block: [\n                                            StatementNode {\n                                                kind: Expression(\n                                                    ExpressionNode {\n                                                        kind: Call {\n                                                            func: ExpressionNode {\n                                                                kind: Identifier(\n                                                                    \"print\",\n                                                                ),\n                                                                span: Span {\n                                                                    row_start: 45,\n                                                                    row_end: Some(\n                                                                        45,\n                                                                    ),\n                                                                    col_start: 9,\n                                                                    col_end: Some(\n                                                                        14,\n                                                                    ),\n                                                                },\n                                                            },\n                                                            args: [\n                                                                ExpressionNode {\n                                                                    kind: Literal(\n                                                                        String(\n                                                                            \"zero\",\n                                                                        ),\n                                                                    ),\n                                                                    span: Span {\n                                                                        row_start: 45,\n                                                                        row_end: Some(\n                                                                            45,\n                                                                        ),\n                                                                        col_start: 15,\n                                                                        col_end: Some(\n                                                                            21,\n                                                                        ),\n                                                                    },\n                                                                },\n                                                            ],\n                                                        },\n                                                        span: Span {\n                                                            row_start: 45,\n                                                            row_end: Some(\n                                                                45,\n                                                            ),\n                                                            col_start: 9,\n                                                            col_end: Some(\n                                                                14,\n                                                            ),\n                                                        },\n                                                    },\n                                                ),\n                                                span: Span {\n                                                    row_start: 45,\n                                                    row_end: Some(\n                                                        45,\n                                                    ),\n                                                    col_start: 9,\n                                                    col_end: Some(\n                                                        14,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                        else_block: None,\n                                    },\n                                    span: Span {\n                                        row_start: 44,\n                                        row_end: Some(\n                                            45,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            14,\n                                        ),\n                                    },\n                                },\n                            ],\n                        ),\n                    },\n                    span: Span {\n                        row_start: 42,\n                        row_end: Some(\n                            45,\n                        ),\n                        col_start: 5,\n                        col_end: Some(\n                            14,\n                        ),\n                    },\n                },\n            ],\n        },\n        span: Span {\n            row_start: 41,\n            row_end: Some(\n                45,\n            ),\n            col_start: 5,\n            col_end: Some(\n                14,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: While {\n            cond: ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"x\",\n                        ),\n                        span: Span {\n                            row_start: 49,\n                            row_end: Some(\n                                49,\n                            ),\n                            col_start: 7,\n                            col_end: Some(\n                                8,\n                            ),\n                        },\n                    },\n                    op: Less,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                3,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 49,\n                            row_end: Some(\n                                49,\n                            ),\n                            col_start: 11,\n                            col_end: Some(\n                                12,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 49,\n                    row_end: Some(\n                        49,\n                    ),\n                    col_start: 7,\n                    col_end: Some(\n                        12,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Identifier(\n                                        \"x\",\n                                    ),\n                                    span: Span {\n                                        row_start: 50,\n                                        row_end: Some(\n                                            50,\n                                        ),\n                                        col_start: 5,\n                                        col_end: Some(\n                                            6,\n                                        ),\n                                    },\n                                },\n                                op: Assign,\n                                right: ExpressionNode {\n                                    kind: Binary {\n                                        left: ExpressionNode {\n                                            kind: Identifier(\n                                                \"x\",\n                                            ),\n                                            span: Span {\n                                                row_start: 50,\n                                                row_end: Some(\n                                                    50,\n                                                ),\n                                                col_start: 9,\n                                                col_end: Some(\n                                                    10,\n                                                ),\n                                            },\n                                        },\n                                        op: Add,\n                                        right: ExpressionNode {\n                                            kind: Literal(\n                                                Integer(\n                                                    1,\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 50,\n                                                row_end: Some(\n                                                    50,\n                                                ),\n                                                col_start: 13,\n                                                col_end: Some(\n                                                    14,\n                                                ),\n                                            },\n                                        },\n                                    },\n                                    span: Span {\n                                        row_start: 50,\n                                        row_end: Some(\n                                            50,\n                                        ),\n                                        col_start: 9,\n                                        col_end: Some(\n                                            14,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 50,\n                                row_end: Some(\n                                    50,\n                                ),\n                                col_start: 5,\n                                col_end: Some(\n                                    14,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 50,\n                        row_end: Some(\n                            50,\n                        ),\n                        col_start: 5,\n                        col_end: Some(\n                            14,\n                        ),\n                    },\n                },\n            ],\n        },\n        span: Span {\n            row_start: 49,\n            row_end: Some(\n                50,\n            ),\n            col_start: 7,\n            col_end: Some(\n                14,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: If {\n            cond: ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"x\",\n                        ),\n                        span: Span {\n                            row_start: 53,\n                            row_end: Some(\n                                53,\n                            ),\n                            col_start: 4,\n                            col_end: Some(\n                                5,\n                            ),\n                        },\n                    },\n                    op: Greater,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                1,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 53,\n                            row_end: Some(\n                                53,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                9,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 53,\n                    row_end: Some(\n                        53,\n                    ),\n                    col_start: 4,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n            then_block: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 55,\n                                        row_end: Some(\n                                            55,\n                                        ),\n                                        col_start: 5,\n                                        col_end: Some(\n                                            10,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Literal(\n                                            String(\n                                                \"nl brace then\",\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 55,\n                                            row_end: Some(\n                                                55,\n                                            ),\n                                            col_start: 11,\n                                            col_end: Some(\n                                                26,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 55,\n                                row_end: Some(\n                                    55,\n                                ),\n                                col_start: 5,\n                                col_end: Some(\n                                    10,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 55,\n                        row_end: Some(\n                            55,\n                        ),\n                        col_start: 5,\n                        col_end: Some(\n                            10,\n                        ),\n                    },\n                },\n            ],\n            else_block: Some(\n                [\n                    StatementNode {\n                        kind: Expression(\n                            ExpressionNode {\n                                kind: Call {\n                                    func: ExpressionNode {\n                                        kind: Identifier(\n                                            \"print\",\n                                        ),\n                                        span: Span {\n                                            row_start: 59,\n                                            row_end: Some(\n                                                59,\n                                            ),\n                                            col_start: 5,\n                                            col_end: Some(\n                                                10,\n                                            ),\n                                        },\n                                    },\n                                    args: [\n                                        ExpressionNode {\n                                            kind: Literal(\n                                                String(\n                                                    \"nl brace else\",\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 59,\n                                                row_end: Some(\n                                                    59,\n                                                ),\n                                                col_start: 11,\n                                                col_end: Some(\n                                                    26,\n                                                ),\n                                            },\n                                        },\n                                    ],\n                                },\n                                span: Span {\n                                    row_start: 59,\n                                    row_end: Some(\n                                        59,\n                                    ),\n                                    col_start: 5,\n                                    col_end: Some(\n                                        10,\n                                    ),\n                                },\n                            },\n                        ),\n                        span: Span {\n                            row_start: 59,\n                            row_end: Some(\n                                59,\n                            ),\n                            col_start: 5,\n                            col_end: Some(\n                                10,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n        span: Span {\n            row_start: 53,\n            row_end: Some(\n                59,\n            ),\n            col_start: 1,\n            col_end: Some(\n                10,\n            ),\n        },\n    },\n)\n\n"
