---
source: tests/source_integration.rs
expression: "format!(\"{:#?}\", expected)"
---
"import math\nimport utils.logger as _\n\nconst int MAX = 100\nlet flt = 7.82\nlet message = \"Mux Parser Test\"\n\nenum Shape { Circle(float radius), Rectangle(float width, float height), Square(float size) }\n\ninterface Drawable { func draw() returns void }\n\nclass Circle is Drawable, ShapeLike {\n    float radius\n    func draw() returns void { print(\"Circle radius=\" + radius) }\n    func area() returns float { return pi * radius * radius }\n    func resize(float newRadius, string _) returns void { radius = newRadius }\n}\n\nfunc max[T comparable](T a, T b) returns T { if a > b { return a } return b }\nclass Stack[T] {\n    list<T> items\n    func push(T item) returns void { items.append(item) }\n    func pop() returns Optional<T> {\n        if items.isEmpty() { return None }\n        return Some(items.removeLast())\n    }\n}\n\nfunc divide(int a, int b) returns Result<int, string> {\n    if b == 0 { return Err(\"Division by zero\") }\n    return Ok(a / b)\n}\nfunc findEven(list<int> nums) returns Optional<int> {\n    for let n in nums { if n % 2 == 0 { return Some(n) } }\n}\n\nfunc map[T, U](list<T> items, func(T) returns U transform) returns list<U> {\n    let out = list<U>()\n    for item in items { out.append(transform(item)) }\n    return out\n}\n\nfunc main() returns void {\n    let explicit = 10\n    let inferred = 42\n    let floatVal = 9.4\n    let (a, _) = (1, 2)\n\n    if inferred > 40 { print(\"Big number\") } else { print(\"Small number\") }\n\n    let maybeNum = Some(15)\n    match maybeNum {\n        Some(v) if v > 10 { print(\"Large value: \" + v) }\n        Some(v) { print(\"Small value: \" + v) }\n        None { print(\"No value\") }\n        _ { print(\"Unexpected\") }\n    }\n\n    let nums = [1, 2, 3]\n    let shapes = [Circle(2.0), Circle(3.5)]\n    for shape in shapes { shape.draw() }\n\n    let maximum = max(7, 12)\n    let stack = Stack<int>()\n    stack.push(99)\n    let popped = stack.pop()\n\n    let res = divide(10, 2)\n    match res { Ok(v) { print(v) } Err(e) { print(e) } }\n\n    let maybeEven = findEven([1, 3, 4, 7])\n    match maybeEven { Some(v) { print(v) } None { print(\"None\") } }\n\n    let square = func(int n) { return n * n }\n    let doubled = map([1, 2, 3], func(let x) { return x * 2 })\n    let squared = map([1, 2, 3], square)\n\n    int val = 10\n    let p = &val\n    *p = 20\n}\n"
