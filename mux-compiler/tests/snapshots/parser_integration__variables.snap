---
source: tests/parser_integration.rs
expression: ast_string
---
"Statement(\n    StatementNode {\n        kind: ConstDecl(\n            \"MAX\",\n            TypeNode {\n                kind: Primitive(\n                    Int,\n                ),\n                span: Span {\n                    row_start: 2,\n                    row_end: Some(\n                        2,\n                    ),\n                    col_start: 7,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Integer(\n                        100,\n                    ),\n                ),\n                span: Span {\n                    row_start: 2,\n                    row_end: Some(\n                        2,\n                    ),\n                    col_start: 17,\n                    col_end: Some(\n                        20,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 2,\n            row_end: Some(\n                2,\n            ),\n            col_start: 1,\n            col_end: Some(\n                20,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: TypedDecl(\n            \"explicit\",\n            TypeNode {\n                kind: Primitive(\n                    Int,\n                ),\n                span: Span {\n                    row_start: 3,\n                    row_end: Some(\n                        3,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        4,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Integer(\n                        42,\n                    ),\n                ),\n                span: Span {\n                    row_start: 3,\n                    row_end: Some(\n                        3,\n                    ),\n                    col_start: 16,\n                    col_end: Some(\n                        18,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 3,\n            row_end: Some(\n                3,\n            ),\n            col_start: 1,\n            col_end: Some(\n                18,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"inferred\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 4,\n                    row_end: Some(\n                        4,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        14,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Float(\n                        4.89,\n                    ),\n                ),\n                span: Span {\n                    row_start: 4,\n                    row_end: Some(\n                        4,\n                    ),\n                    col_start: 17,\n                    col_end: Some(\n                        21,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 4,\n            row_end: Some(\n                4,\n            ),\n            col_start: 1,\n            col_end: Some(\n                21,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"name\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 5,\n                    row_end: Some(\n                        5,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    String(\n                        \"Mux\",\n                    ),\n                ),\n                span: Span {\n                    row_start: 5,\n                    row_end: Some(\n                        5,\n                    ),\n                    col_start: 13,\n                    col_end: Some(\n                        18,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 5,\n            row_end: Some(\n                5,\n            ),\n            col_start: 1,\n            col_end: Some(\n                18,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"flag\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Boolean(\n                        true,\n                    ),\n                ),\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 13,\n                    col_end: Some(\n                        17,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 7,\n            row_end: Some(\n                7,\n            ),\n            col_start: 1,\n            col_end: Some(\n                17,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"otherflag\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 8,\n                    row_end: Some(\n                        8,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        15,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Boolean(\n                        false,\n                    ),\n                ),\n                span: Span {\n                    row_start: 8,\n                    row_end: Some(\n                        8,\n                    ),\n                    col_start: 18,\n                    col_end: Some(\n                        23,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 8,\n            row_end: Some(\n                8,\n            ),\n            col_start: 1,\n            col_end: Some(\n                23,\n            ),\n        },\n    },\n)\n\n"
