---
source: tests/parser_integration.rs
expression: ast_string
---
"Statement(\n    StatementNode {\n        kind: Import {\n            module_path: \"std.print\",\n            alias: None,\n        },\n        span: Span {\n            row_start: 1,\n            row_end: Some(\n                1,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: TypedDecl(\n            \"val\",\n            TypeNode {\n                kind: Primitive(\n                    Int,\n                ),\n                span: Span {\n                    row_start: 4,\n                    row_end: Some(\n                        4,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        4,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Integer(\n                        10,\n                    ),\n                ),\n                span: Span {\n                    row_start: 4,\n                    row_end: Some(\n                        4,\n                    ),\n                    col_start: 11,\n                    col_end: Some(\n                        13,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 4,\n            row_end: Some(\n                4,\n            ),\n            col_start: 1,\n            col_end: Some(\n                13,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"r\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 5,\n                    row_end: Some(\n                        5,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        7,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Unary {\n                    op: Ref,\n                    expr: ExpressionNode {\n                        kind: Identifier(\n                            \"val\",\n                        ),\n                        span: Span {\n                            row_start: 5,\n                            row_end: Some(\n                                5,\n                            ),\n                            col_start: 11,\n                            col_end: Some(\n                                14,\n                            ),\n                        },\n                    },\n                    postfix: false,\n                },\n                span: Span {\n                    row_start: 5,\n                    row_end: Some(\n                        5,\n                    ),\n                    col_start: 10,\n                    col_end: Some(\n                        14,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 5,\n            row_end: Some(\n                5,\n            ),\n            col_start: 1,\n            col_end: Some(\n                14,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"print\",\n                        ),\n                        span: Span {\n                            row_start: 6,\n                            row_end: Some(\n                                6,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                6,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Identifier(\n                                \"r\",\n                            ),\n                            span: Span {\n                                row_start: 6,\n                                row_end: Some(\n                                    6,\n                                ),\n                                col_start: 7,\n                                col_end: Some(\n                                    8,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 6,\n                    row_end: Some(\n                        6,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        6,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 6,\n            row_end: Some(\n                6,\n            ),\n            col_start: 1,\n            col_end: Some(\n                6,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Binary {\n                    left: ExpressionNode {\n                        kind: Identifier(\n                            \"r\",\n                        ),\n                        span: Span {\n                            row_start: 7,\n                            row_end: Some(\n                                7,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                2,\n                            ),\n                        },\n                    },\n                    op: Assign,\n                    right: ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                20,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 7,\n                            row_end: Some(\n                                7,\n                            ),\n                            col_start: 5,\n                            col_end: Some(\n                                7,\n                            ),\n                        },\n                    },\n                },\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        7,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 7,\n            row_end: Some(\n                7,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"print\",\n                        ),\n                        span: Span {\n                            row_start: 8,\n                            row_end: Some(\n                                8,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                6,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Identifier(\n                                \"val\",\n                            ),\n                            span: Span {\n                                row_start: 8,\n                                row_end: Some(\n                                    8,\n                                ),\n                                col_start: 7,\n                                col_end: Some(\n                                    10,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 8,\n                    row_end: Some(\n                        8,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        6,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 8,\n            row_end: Some(\n                8,\n            ),\n            col_start: 1,\n            col_end: Some(\n                6,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"numbers\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        13,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: ListLiteral(\n                    [\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    1,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 17,\n                                col_end: Some(\n                                    18,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    2,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 20,\n                                col_end: Some(\n                                    21,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    3,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 23,\n                                col_end: Some(\n                                    24,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    4,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 26,\n                                col_end: Some(\n                                    27,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    5,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 29,\n                                col_end: Some(\n                                    30,\n                                ),\n                            },\n                        },\n                    ],\n                ),\n                span: Span {\n                    row_start: 11,\n                    row_end: None,\n                    col_start: 16,\n                    col_end: None,\n                },\n            },\n        ),\n        span: Span {\n            row_start: 11,\n            row_end: Some(\n                11,\n            ),\n            col_start: 1,\n            col_end: Some(\n                5,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"first\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 12,\n                    row_end: Some(\n                        12,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        11,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Unary {\n                    op: Ref,\n                    expr: ExpressionNode {\n                        kind: ListAccess {\n                            expr: ExpressionNode {\n                                kind: Identifier(\n                                    \"numbers\",\n                                ),\n                                span: Span {\n                                    row_start: 12,\n                                    row_end: Some(\n                                        12,\n                                    ),\n                                    col_start: 15,\n                                    col_end: Some(\n                                        22,\n                                    ),\n                                },\n                            },\n                            index: ExpressionNode {\n                                kind: Literal(\n                                    Integer(\n                                        0,\n                                    ),\n                                ),\n                                span: Span {\n                                    row_start: 12,\n                                    row_end: Some(\n                                        12,\n                                    ),\n                                    col_start: 23,\n                                    col_end: Some(\n                                        24,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 12,\n                            row_end: Some(\n                                12,\n                            ),\n                            col_start: 15,\n                            col_end: Some(\n                                22,\n                            ),\n                        },\n                    },\n                    postfix: false,\n                },\n                span: Span {\n                    row_start: 12,\n                    row_end: Some(\n                        12,\n                    ),\n                    col_start: 14,\n                    col_end: Some(\n                        22,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 12,\n            row_end: Some(\n                12,\n            ),\n            col_start: 1,\n            col_end: Some(\n                22,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"print\",\n                        ),\n                        span: Span {\n                            row_start: 13,\n                            row_end: Some(\n                                13,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                6,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Identifier(\n                                \"first\",\n                            ),\n                            span: Span {\n                                row_start: 13,\n                                row_end: Some(\n                                    13,\n                                ),\n                                col_start: 7,\n                                col_end: Some(\n                                    12,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 13,\n                    row_end: Some(\n                        13,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        6,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 13,\n            row_end: Some(\n                13,\n            ),\n            col_start: 1,\n            col_end: Some(\n                6,\n            ),\n        },\n    },\n)\n\nFunction(\n    FunctionNode {\n        name: \"update\",\n        type_params: [],\n        params: [\n            Param {\n                name: \"ref\",\n                type_: TypeNode {\n                    kind: Reference(\n                        TypeNode {\n                            kind: Primitive(\n                                Int,\n                            ),\n                            span: Span {\n                                row_start: 16,\n                                row_end: Some(\n                                    16,\n                                ),\n                                col_start: 14,\n                                col_end: Some(\n                                    17,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 16,\n                        row_end: Some(\n                            16,\n                        ),\n                        col_start: 13,\n                        col_end: Some(\n                            17,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Primitive(\n                Void,\n            ),\n            span: Span {\n                row_start: 16,\n                row_end: Some(\n                    16,\n                ),\n                col_start: 31,\n                col_end: Some(\n                    35,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: Expression(\n                    ExpressionNode {\n                        kind: Binary {\n                            left: ExpressionNode {\n                                kind: Identifier(\n                                    \"ref\",\n                                ),\n                                span: Span {\n                                    row_start: 17,\n                                    row_end: Some(\n                                        17,\n                                    ),\n                                    col_start: 5,\n                                    col_end: Some(\n                                        8,\n                                    ),\n                                },\n                            },\n                            op: Assign,\n                            right: ExpressionNode {\n                                kind: Binary {\n                                    left: ExpressionNode {\n                                        kind: Identifier(\n                                            \"ref\",\n                                        ),\n                                        span: Span {\n                                            row_start: 17,\n                                            row_end: Some(\n                                                17,\n                                            ),\n                                            col_start: 11,\n                                            col_end: Some(\n                                                14,\n                                            ),\n                                        },\n                                    },\n                                    op: Add,\n                                    right: ExpressionNode {\n                                        kind: Literal(\n                                            Integer(\n                                                1,\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 17,\n                                            row_end: Some(\n                                                17,\n                                            ),\n                                            col_start: 17,\n                                            col_end: Some(\n                                                18,\n                                            ),\n                                        },\n                                    },\n                                },\n                                span: Span {\n                                    row_start: 17,\n                                    row_end: Some(\n                                        17,\n                                    ),\n                                    col_start: 11,\n                                    col_end: Some(\n                                        18,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 17,\n                            row_end: Some(\n                                17,\n                            ),\n                            col_start: 5,\n                            col_end: Some(\n                                18,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 17,\n                    row_end: Some(\n                        17,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        18,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 16,\n            row_end: Some(\n                17,\n            ),\n            col_start: 1,\n            col_end: Some(\n                18,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"update\",\n                        ),\n                        span: Span {\n                            row_start: 20,\n                            row_end: Some(\n                                20,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                7,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Unary {\n                                op: Ref,\n                                expr: ExpressionNode {\n                                    kind: Identifier(\n                                        \"val\",\n                                    ),\n                                    span: Span {\n                                        row_start: 20,\n                                        row_end: Some(\n                                            20,\n                                        ),\n                                        col_start: 9,\n                                        col_end: Some(\n                                            12,\n                                        ),\n                                    },\n                                },\n                                postfix: false,\n                            },\n                            span: Span {\n                                row_start: 20,\n                                row_end: Some(\n                                    20,\n                                ),\n                                col_start: 8,\n                                col_end: Some(\n                                    12,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 20,\n                    row_end: Some(\n                        20,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        7,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 20,\n            row_end: Some(\n                20,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"print\",\n                        ),\n                        span: Span {\n                            row_start: 21,\n                            row_end: Some(\n                                21,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                6,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Identifier(\n                                \"val\",\n                            ),\n                            span: Span {\n                                row_start: 21,\n                                row_end: Some(\n                                    21,\n                                ),\n                                col_start: 7,\n                                col_end: Some(\n                                    10,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 21,\n                    row_end: Some(\n                        21,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        6,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 21,\n            row_end: Some(\n                21,\n            ),\n            col_start: 1,\n            col_end: Some(\n                6,\n            ),\n        },\n    },\n)\n\n"
