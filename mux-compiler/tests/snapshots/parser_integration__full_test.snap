---
source: tests/parser_integration.rs
expression: ast_string
---
"Statement(\n    StatementNode {\n        kind: Import {\n            module_path: \"math\",\n            alias: None,\n        },\n        span: Span {\n            row_start: 1,\n            row_end: Some(\n                1,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Import {\n            module_path: \"utils.logger\",\n            alias: Some(\n                \"_\",\n            ),\n        },\n        span: Span {\n            row_start: 2,\n            row_end: Some(\n                2,\n            ),\n            col_start: 1,\n            col_end: Some(\n                23,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Import {\n            module_path: \"std.Some\",\n            alias: None,\n        },\n        span: Span {\n            row_start: 4,\n            row_end: Some(\n                4,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: ConstDecl(\n            \"MAX\",\n            TypeNode {\n                kind: Primitive(\n                    Int,\n                ),\n                span: Span {\n                    row_start: 6,\n                    row_end: Some(\n                        6,\n                    ),\n                    col_start: 7,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Integer(\n                        100,\n                    ),\n                ),\n                span: Span {\n                    row_start: 6,\n                    row_end: Some(\n                        6,\n                    ),\n                    col_start: 17,\n                    col_end: Some(\n                        20,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 6,\n            row_end: Some(\n                6,\n            ),\n            col_start: 1,\n            col_end: Some(\n                20,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"flt\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Float(\n                        7.82,\n                    ),\n                ),\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 12,\n                    col_end: Some(\n                        16,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 7,\n            row_end: Some(\n                7,\n            ),\n            col_start: 1,\n            col_end: Some(\n                16,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"message\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 8,\n                    row_end: Some(\n                        8,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        13,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    String(\n                        \"Mux Parser Test\",\n                    ),\n                ),\n                span: Span {\n                    row_start: 8,\n                    row_end: Some(\n                        8,\n                    ),\n                    col_start: 16,\n                    col_end: Some(\n                        33,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 8,\n            row_end: Some(\n                8,\n            ),\n            col_start: 1,\n            col_end: Some(\n                33,\n            ),\n        },\n    },\n)\n\nEnum {\n    name: \"Shape\",\n    type_params: [],\n    variants: [\n        EnumVariant {\n            name: \"Circle\",\n            data: Some(\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 10,\n                            row_end: Some(\n                                10,\n                            ),\n                            col_start: 21,\n                            col_end: Some(\n                                26,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n        EnumVariant {\n            name: \"Rectangle\",\n            data: Some(\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 10,\n                            row_end: Some(\n                                10,\n                            ),\n                            col_start: 46,\n                            col_end: Some(\n                                51,\n                            ),\n                        },\n                    },\n                    TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 10,\n                            row_end: Some(\n                                10,\n                            ),\n                            col_start: 59,\n                            col_end: Some(\n                                64,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n        EnumVariant {\n            name: \"Square\",\n            data: Some(\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 10,\n                            row_end: Some(\n                                10,\n                            ),\n                            col_start: 81,\n                            col_end: Some(\n                                86,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n    ],\n    span: Span {\n        row_start: 10,\n        row_end: Some(\n            10,\n        ),\n        col_start: 1,\n        col_end: Some(\n            5,\n        ),\n    },\n}\n\nInterface {\n    name: \"Drawable\",\n    type_params: [],\n    methods: [\n        FunctionNode {\n            name: \"draw\",\n            type_params: [],\n            params: [],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Void,\n                ),\n                span: Span {\n                    row_start: 12,\n                    row_end: Some(\n                        12,\n                    ),\n                    col_start: 42,\n                    col_end: Some(\n                        46,\n                    ),\n                },\n            },\n            body: [],\n            span: Span {\n                row_start: 12,\n                row_end: Some(\n                    12,\n                ),\n                col_start: 1,\n                col_end: Some(\n                    10,\n                ),\n            },\n        },\n    ],\n    span: Span {\n        row_start: 12,\n        row_end: Some(\n            12,\n        ),\n        col_start: 1,\n        col_end: Some(\n            10,\n        ),\n    },\n}\n\nClass {\n    name: \"Circle\",\n    type_params: [],\n    traits: [\n        TraitRef {\n            name: \"Drawable\",\n            type_args: [],\n        },\n        TraitRef {\n            name: \"ShapeLike\",\n            type_args: [],\n        },\n    ],\n    fields: [\n        Field {\n            name: \"radius\",\n            type_: TypeNode {\n                kind: Primitive(\n                    Float,\n                ),\n                span: Span {\n                    row_start: 15,\n                    row_end: Some(\n                        15,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n        },\n    ],\n    methods: [\n        FunctionNode {\n            name: \"draw\",\n            type_params: [],\n            params: [],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Void,\n                ),\n                span: Span {\n                    row_start: 16,\n                    row_end: Some(\n                        16,\n                    ),\n                    col_start: 25,\n                    col_end: Some(\n                        29,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 16,\n                                        row_end: Some(\n                                            16,\n                                        ),\n                                        col_start: 32,\n                                        col_end: Some(\n                                            37,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Binary {\n                                            left: ExpressionNode {\n                                                kind: Literal(\n                                                    String(\n                                                        \"Circle radius=\",\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 16,\n                                                    row_end: Some(\n                                                        16,\n                                                    ),\n                                                    col_start: 38,\n                                                    col_end: Some(\n                                                        54,\n                                                    ),\n                                                },\n                                            },\n                                            op: Add,\n                                            right: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"radius\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 16,\n                                                    row_end: Some(\n                                                        16,\n                                                    ),\n                                                    col_start: 57,\n                                                    col_end: Some(\n                                                        63,\n                                                    ),\n                                                },\n                                            },\n                                        },\n                                        span: Span {\n                                            row_start: 16,\n                                            row_end: Some(\n                                                16,\n                                            ),\n                                            col_start: 38,\n                                            col_end: Some(\n                                                63,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 16,\n                                row_end: Some(\n                                    16,\n                                ),\n                                col_start: 32,\n                                col_end: Some(\n                                    37,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 16,\n                        row_end: Some(\n                            16,\n                        ),\n                        col_start: 32,\n                        col_end: Some(\n                            37,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 16,\n                row_end: Some(\n                    16,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    37,\n                ),\n            },\n        },\n        FunctionNode {\n            name: \"area\",\n            type_params: [],\n            params: [],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Float,\n                ),\n                span: Span {\n                    row_start: 17,\n                    row_end: Some(\n                        17,\n                    ),\n                    col_start: 25,\n                    col_end: Some(\n                        30,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Return(\n                        Some(\n                            ExpressionNode {\n                                kind: Binary {\n                                    left: ExpressionNode {\n                                        kind: Binary {\n                                            left: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"pi\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 17,\n                                                    row_end: Some(\n                                                        17,\n                                                    ),\n                                                    col_start: 40,\n                                                    col_end: Some(\n                                                        42,\n                                                    ),\n                                                },\n                                            },\n                                            op: Multiply,\n                                            right: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"radius\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 17,\n                                                    row_end: Some(\n                                                        17,\n                                                    ),\n                                                    col_start: 45,\n                                                    col_end: Some(\n                                                        51,\n                                                    ),\n                                                },\n                                            },\n                                        },\n                                        span: Span {\n                                            row_start: 17,\n                                            row_end: Some(\n                                                17,\n                                            ),\n                                            col_start: 40,\n                                            col_end: Some(\n                                                51,\n                                            ),\n                                        },\n                                    },\n                                    op: Multiply,\n                                    right: ExpressionNode {\n                                        kind: Identifier(\n                                            \"radius\",\n                                        ),\n                                        span: Span {\n                                            row_start: 17,\n                                            row_end: Some(\n                                                17,\n                                            ),\n                                            col_start: 54,\n                                            col_end: Some(\n                                                60,\n                                            ),\n                                        },\n                                    },\n                                },\n                                span: Span {\n                                    row_start: 17,\n                                    row_end: Some(\n                                        17,\n                                    ),\n                                    col_start: 40,\n                                    col_end: Some(\n                                        60,\n                                    ),\n                                },\n                            },\n                        ),\n                    ),\n                    span: Span {\n                        row_start: 17,\n                        row_end: Some(\n                            17,\n                        ),\n                        col_start: 40,\n                        col_end: Some(\n                            60,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 17,\n                row_end: Some(\n                    17,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    60,\n                ),\n            },\n        },\n        FunctionNode {\n            name: \"resize\",\n            type_params: [],\n            params: [\n                Param {\n                    name: \"newRadius\",\n                    type_: TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 18,\n                            row_end: Some(\n                                18,\n                            ),\n                            col_start: 17,\n                            col_end: Some(\n                                22,\n                            ),\n                        },\n                    },\n                },\n                Param {\n                    name: \"_\",\n                    type_: TypeNode {\n                        kind: Named(\n                            \"string\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 18,\n                            row_end: Some(\n                                18,\n                            ),\n                            col_start: 34,\n                            col_end: Some(\n                                40,\n                            ),\n                        },\n                    },\n                },\n            ],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Void,\n                ),\n                span: Span {\n                    row_start: 18,\n                    row_end: Some(\n                        18,\n                    ),\n                    col_start: 52,\n                    col_end: Some(\n                        56,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Identifier(\n                                        \"radius\",\n                                    ),\n                                    span: Span {\n                                        row_start: 18,\n                                        row_end: Some(\n                                            18,\n                                        ),\n                                        col_start: 59,\n                                        col_end: Some(\n                                            65,\n                                        ),\n                                    },\n                                },\n                                op: Assign,\n                                right: ExpressionNode {\n                                    kind: Identifier(\n                                        \"newRadius\",\n                                    ),\n                                    span: Span {\n                                        row_start: 18,\n                                        row_end: Some(\n                                            18,\n                                        ),\n                                        col_start: 68,\n                                        col_end: Some(\n                                            77,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 18,\n                                row_end: Some(\n                                    18,\n                                ),\n                                col_start: 59,\n                                col_end: Some(\n                                    77,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 18,\n                        row_end: Some(\n                            18,\n                        ),\n                        col_start: 59,\n                        col_end: Some(\n                            77,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 18,\n                row_end: Some(\n                    18,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    77,\n                ),\n            },\n        },\n    ],\n    span: Span {\n        row_start: 14,\n        row_end: Some(\n            14,\n        ),\n        col_start: 1,\n        col_end: Some(\n            6,\n        ),\n    },\n}\n\nFunction(\n    FunctionNode {\n        name: \"max\",\n        type_params: [\n            (\n                \"T\",\n                [\n                    TraitBound {\n                        name: \"comparable\",\n                        type_params: [],\n                    },\n                ],\n            ),\n        ],\n        params: [\n            Param {\n                name: \"a\",\n                type_: TypeNode {\n                    kind: Named(\n                        \"T\",\n                        [],\n                    ),\n                    span: Span {\n                        row_start: 21,\n                        row_end: Some(\n                            21,\n                        ),\n                        col_start: 27,\n                        col_end: Some(\n                            28,\n                        ),\n                    },\n                },\n            },\n            Param {\n                name: \"b\",\n                type_: TypeNode {\n                    kind: Named(\n                        \"T\",\n                        [],\n                    ),\n                    span: Span {\n                        row_start: 21,\n                        row_end: Some(\n                            21,\n                        ),\n                        col_start: 32,\n                        col_end: Some(\n                            33,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Named(\n                \"T\",\n                [],\n            ),\n            span: Span {\n                row_start: 21,\n                row_end: Some(\n                    21,\n                ),\n                col_start: 45,\n                col_end: Some(\n                    46,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: If {\n                    cond: ExpressionNode {\n                        kind: Binary {\n                            left: ExpressionNode {\n                                kind: Identifier(\n                                    \"a\",\n                                ),\n                                span: Span {\n                                    row_start: 21,\n                                    row_end: Some(\n                                        21,\n                                    ),\n                                    col_start: 52,\n                                    col_end: Some(\n                                        53,\n                                    ),\n                                },\n                            },\n                            op: Greater,\n                            right: ExpressionNode {\n                                kind: Identifier(\n                                    \"b\",\n                                ),\n                                span: Span {\n                                    row_start: 21,\n                                    row_end: Some(\n                                        21,\n                                    ),\n                                    col_start: 56,\n                                    col_end: Some(\n                                        57,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 21,\n                            row_end: Some(\n                                21,\n                            ),\n                            col_start: 52,\n                            col_end: Some(\n                                57,\n                            ),\n                        },\n                    },\n                    then_block: [\n                        StatementNode {\n                            kind: Return(\n                                Some(\n                                    ExpressionNode {\n                                        kind: Identifier(\n                                            \"a\",\n                                        ),\n                                        span: Span {\n                                            row_start: 21,\n                                            row_end: Some(\n                                                21,\n                                            ),\n                                            col_start: 67,\n                                            col_end: Some(\n                                                68,\n                                            ),\n                                        },\n                                    },\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 21,\n                                row_end: Some(\n                                    21,\n                                ),\n                                col_start: 67,\n                                col_end: Some(\n                                    68,\n                                ),\n                            },\n                        },\n                    ],\n                    else_block: None,\n                },\n                span: Span {\n                    row_start: 21,\n                    row_end: Some(\n                        21,\n                    ),\n                    col_start: 49,\n                    col_end: Some(\n                        68,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Return(\n                    Some(\n                        ExpressionNode {\n                            kind: Identifier(\n                                \"b\",\n                            ),\n                            span: Span {\n                                row_start: 21,\n                                row_end: Some(\n                                    21,\n                                ),\n                                col_start: 78,\n                                col_end: Some(\n                                    79,\n                                ),\n                            },\n                        },\n                    ),\n                ),\n                span: Span {\n                    row_start: 21,\n                    row_end: Some(\n                        21,\n                    ),\n                    col_start: 78,\n                    col_end: Some(\n                        79,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 21,\n            row_end: Some(\n                21,\n            ),\n            col_start: 1,\n            col_end: Some(\n                79,\n            ),\n        },\n    },\n)\n\nClass {\n    name: \"Stack\",\n    type_params: [\n        (\n            \"T\",\n            [],\n        ),\n    ],\n    traits: [],\n    fields: [\n        Field {\n            name: \"items\",\n            type_: TypeNode {\n                kind: List(\n                    TypeNode {\n                        kind: Named(\n                            \"T\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 23,\n                            row_end: Some(\n                                23,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                11,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 23,\n                    row_end: Some(\n                        23,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n        },\n    ],\n    methods: [\n        FunctionNode {\n            name: \"push\",\n            type_params: [],\n            params: [\n                Param {\n                    name: \"item\",\n                    type_: TypeNode {\n                        kind: Named(\n                            \"T\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 24,\n                            row_end: Some(\n                                24,\n                            ),\n                            col_start: 15,\n                            col_end: Some(\n                                16,\n                            ),\n                        },\n                    },\n                },\n            ],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Void,\n                ),\n                span: Span {\n                    row_start: 24,\n                    row_end: Some(\n                        24,\n                    ),\n                    col_start: 31,\n                    col_end: Some(\n                        35,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: FieldAccess {\n                                        expr: ExpressionNode {\n                                            kind: Identifier(\n                                                \"items\",\n                                            ),\n                                            span: Span {\n                                                row_start: 24,\n                                                row_end: Some(\n                                                    24,\n                                                ),\n                                                col_start: 38,\n                                                col_end: Some(\n                                                    43,\n                                                ),\n                                            },\n                                        },\n                                        field: \"append\",\n                                    },\n                                    span: Span {\n                                        row_start: 24,\n                                        row_end: Some(\n                                            24,\n                                        ),\n                                        col_start: 38,\n                                        col_end: Some(\n                                            50,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Identifier(\n                                            \"item\",\n                                        ),\n                                        span: Span {\n                                            row_start: 24,\n                                            row_end: Some(\n                                                24,\n                                            ),\n                                            col_start: 51,\n                                            col_end: Some(\n                                                55,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 24,\n                                row_end: Some(\n                                    24,\n                                ),\n                                col_start: 38,\n                                col_end: Some(\n                                    50,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 24,\n                        row_end: Some(\n                            24,\n                        ),\n                        col_start: 38,\n                        col_end: Some(\n                            50,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 24,\n                row_end: Some(\n                    24,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    50,\n                ),\n            },\n        },\n        FunctionNode {\n            name: \"pop\",\n            type_params: [],\n            params: [],\n            return_type: TypeNode {\n                kind: Named(\n                    \"Optional\",\n                    [\n                        TypeNode {\n                            kind: Named(\n                                \"T\",\n                                [],\n                            ),\n                            span: Span {\n                                row_start: 25,\n                                row_end: Some(\n                                    25,\n                                ),\n                                col_start: 33,\n                                col_end: Some(\n                                    34,\n                                ),\n                            },\n                        },\n                    ],\n                ),\n                span: Span {\n                    row_start: 25,\n                    row_end: Some(\n                        25,\n                    ),\n                    col_start: 24,\n                    col_end: Some(\n                        32,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: If {\n                        cond: ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: FieldAccess {\n                                        expr: ExpressionNode {\n                                            kind: Identifier(\n                                                \"items\",\n                                            ),\n                                            span: Span {\n                                                row_start: 26,\n                                                row_end: Some(\n                                                    26,\n                                                ),\n                                                col_start: 12,\n                                                col_end: Some(\n                                                    17,\n                                                ),\n                                            },\n                                        },\n                                        field: \"isEmpty\",\n                                    },\n                                    span: Span {\n                                        row_start: 26,\n                                        row_end: Some(\n                                            26,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            25,\n                                        ),\n                                    },\n                                },\n                                args: [],\n                            },\n                            span: Span {\n                                row_start: 26,\n                                row_end: Some(\n                                    26,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    25,\n                                ),\n                            },\n                        },\n                        then_block: [\n                            StatementNode {\n                                kind: Return(\n                                    Some(\n                                        ExpressionNode {\n                                            kind: Identifier(\n                                                \"None\",\n                                            ),\n                                            span: Span {\n                                                row_start: 26,\n                                                row_end: Some(\n                                                    26,\n                                                ),\n                                                col_start: 37,\n                                                col_end: Some(\n                                                    41,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                ),\n                                span: Span {\n                                    row_start: 26,\n                                    row_end: Some(\n                                        26,\n                                    ),\n                                    col_start: 37,\n                                    col_end: Some(\n                                        41,\n                                    ),\n                                },\n                            },\n                        ],\n                        else_block: None,\n                    },\n                    span: Span {\n                        row_start: 26,\n                        row_end: Some(\n                            26,\n                        ),\n                        col_start: 9,\n                        col_end: Some(\n                            41,\n                        ),\n                    },\n                },\n                StatementNode {\n                    kind: Return(\n                        Some(\n                            ExpressionNode {\n                                kind: Call {\n                                    func: ExpressionNode {\n                                        kind: Identifier(\n                                            \"Some\",\n                                        ),\n                                        span: Span {\n                                            row_start: 27,\n                                            row_end: Some(\n                                                27,\n                                            ),\n                                            col_start: 16,\n                                            col_end: Some(\n                                                20,\n                                            ),\n                                        },\n                                    },\n                                    args: [\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: FieldAccess {\n                                                        expr: ExpressionNode {\n                                                            kind: Identifier(\n                                                                \"items\",\n                                                            ),\n                                                            span: Span {\n                                                                row_start: 27,\n                                                                row_end: Some(\n                                                                    27,\n                                                                ),\n                                                                col_start: 21,\n                                                                col_end: Some(\n                                                                    26,\n                                                                ),\n                                                            },\n                                                        },\n                                                        field: \"removeLast\",\n                                                    },\n                                                    span: Span {\n                                                        row_start: 27,\n                                                        row_end: Some(\n                                                            27,\n                                                        ),\n                                                        col_start: 21,\n                                                        col_end: Some(\n                                                            37,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [],\n                                            },\n                                            span: Span {\n                                                row_start: 27,\n                                                row_end: Some(\n                                                    27,\n                                                ),\n                                                col_start: 21,\n                                                col_end: Some(\n                                                    37,\n                                                ),\n                                            },\n                                        },\n                                    ],\n                                },\n                                span: Span {\n                                    row_start: 27,\n                                    row_end: Some(\n                                        27,\n                                    ),\n                                    col_start: 16,\n                                    col_end: Some(\n                                        20,\n                                    ),\n                                },\n                            },\n                        ),\n                    ),\n                    span: Span {\n                        row_start: 27,\n                        row_end: Some(\n                            27,\n                        ),\n                        col_start: 16,\n                        col_end: Some(\n                            20,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 25,\n                row_end: Some(\n                    27,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    20,\n                ),\n            },\n        },\n    ],\n    span: Span {\n        row_start: 22,\n        row_end: Some(\n            22,\n        ),\n        col_start: 1,\n        col_end: Some(\n            6,\n        ),\n    },\n}\n\nFunction(\n    FunctionNode {\n        name: \"divide\",\n        type_params: [],\n        params: [\n            Param {\n                name: \"a\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Int,\n                    ),\n                    span: Span {\n                        row_start: 31,\n                        row_end: Some(\n                            31,\n                        ),\n                        col_start: 13,\n                        col_end: Some(\n                            16,\n                        ),\n                    },\n                },\n            },\n            Param {\n                name: \"b\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Int,\n                    ),\n                    span: Span {\n                        row_start: 31,\n                        row_end: Some(\n                            31,\n                        ),\n                        col_start: 20,\n                        col_end: Some(\n                            23,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Named(\n                \"Result\",\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 31,\n                            row_end: Some(\n                                31,\n                            ),\n                            col_start: 42,\n                            col_end: Some(\n                                45,\n                            ),\n                        },\n                    },\n                    TypeNode {\n                        kind: Named(\n                            \"string\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 31,\n                            row_end: Some(\n                                31,\n                            ),\n                            col_start: 47,\n                            col_end: Some(\n                                53,\n                            ),\n                        },\n                    },\n                ],\n            ),\n            span: Span {\n                row_start: 31,\n                row_end: Some(\n                    31,\n                ),\n                col_start: 35,\n                col_end: Some(\n                    41,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: If {\n                    cond: ExpressionNode {\n                        kind: Binary {\n                            left: ExpressionNode {\n                                kind: Identifier(\n                                    \"b\",\n                                ),\n                                span: Span {\n                                    row_start: 32,\n                                    row_end: Some(\n                                        32,\n                                    ),\n                                    col_start: 8,\n                                    col_end: Some(\n                                        9,\n                                    ),\n                                },\n                            },\n                            op: Equal,\n                            right: ExpressionNode {\n                                kind: Literal(\n                                    Integer(\n                                        0,\n                                    ),\n                                ),\n                                span: Span {\n                                    row_start: 32,\n                                    row_end: Some(\n                                        32,\n                                    ),\n                                    col_start: 13,\n                                    col_end: Some(\n                                        14,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 32,\n                            row_end: Some(\n                                32,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                14,\n                            ),\n                        },\n                    },\n                    then_block: [\n                        StatementNode {\n                            kind: Return(\n                                Some(\n                                    ExpressionNode {\n                                        kind: Call {\n                                            func: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"Err\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 32,\n                                                    row_end: Some(\n                                                        32,\n                                                    ),\n                                                    col_start: 24,\n                                                    col_end: Some(\n                                                        27,\n                                                    ),\n                                                },\n                                            },\n                                            args: [\n                                                ExpressionNode {\n                                                    kind: Literal(\n                                                        String(\n                                                            \"Division by zero\",\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 32,\n                                                        row_end: Some(\n                                                            32,\n                                                        ),\n                                                        col_start: 28,\n                                                        col_end: Some(\n                                                            46,\n                                                        ),\n                                                    },\n                                                },\n                                            ],\n                                        },\n                                        span: Span {\n                                            row_start: 32,\n                                            row_end: Some(\n                                                32,\n                                            ),\n                                            col_start: 24,\n                                            col_end: Some(\n                                                27,\n                                            ),\n                                        },\n                                    },\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 32,\n                                row_end: Some(\n                                    32,\n                                ),\n                                col_start: 24,\n                                col_end: Some(\n                                    27,\n                                ),\n                            },\n                        },\n                    ],\n                    else_block: None,\n                },\n                span: Span {\n                    row_start: 32,\n                    row_end: Some(\n                        32,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        27,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Return(\n                    Some(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"Ok\",\n                                    ),\n                                    span: Span {\n                                        row_start: 33,\n                                        row_end: Some(\n                                            33,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            14,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Binary {\n                                            left: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"a\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 33,\n                                                    row_end: Some(\n                                                        33,\n                                                    ),\n                                                    col_start: 15,\n                                                    col_end: Some(\n                                                        16,\n                                                    ),\n                                                },\n                                            },\n                                            op: Divide,\n                                            right: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"b\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 33,\n                                                    row_end: Some(\n                                                        33,\n                                                    ),\n                                                    col_start: 19,\n                                                    col_end: Some(\n                                                        20,\n                                                    ),\n                                                },\n                                            },\n                                        },\n                                        span: Span {\n                                            row_start: 33,\n                                            row_end: Some(\n                                                33,\n                                            ),\n                                            col_start: 15,\n                                            col_end: Some(\n                                                20,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 33,\n                                row_end: Some(\n                                    33,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    14,\n                                ),\n                            },\n                        },\n                    ),\n                ),\n                span: Span {\n                    row_start: 33,\n                    row_end: Some(\n                        33,\n                    ),\n                    col_start: 12,\n                    col_end: Some(\n                        14,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 31,\n            row_end: Some(\n                33,\n            ),\n            col_start: 1,\n            col_end: Some(\n                14,\n            ),\n        },\n    },\n)\n\nFunction(\n    FunctionNode {\n        name: \"findEven\",\n        type_params: [],\n        params: [\n            Param {\n                name: \"nums\",\n                type_: TypeNode {\n                    kind: List(\n                        TypeNode {\n                            kind: Primitive(\n                                Int,\n                            ),\n                            span: Span {\n                                row_start: 35,\n                                row_end: Some(\n                                    35,\n                                ),\n                                col_start: 20,\n                                col_end: Some(\n                                    23,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 35,\n                        row_end: Some(\n                            35,\n                        ),\n                        col_start: 15,\n                        col_end: Some(\n                            19,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Named(\n                \"Optional\",\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 35,\n                            row_end: Some(\n                                35,\n                            ),\n                            col_start: 48,\n                            col_end: Some(\n                                51,\n                            ),\n                        },\n                    },\n                ],\n            ),\n            span: Span {\n                row_start: 35,\n                row_end: Some(\n                    35,\n                ),\n                col_start: 39,\n                col_end: Some(\n                    47,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: For {\n                    var: \"n\",\n                    var_type: TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 36,\n                            row_end: Some(\n                                36,\n                            ),\n                            col_start: 9,\n                            col_end: Some(\n                                12,\n                            ),\n                        },\n                    },\n                    iter: ExpressionNode {\n                        kind: Identifier(\n                            \"nums\",\n                        ),\n                        span: Span {\n                            row_start: 36,\n                            row_end: Some(\n                                36,\n                            ),\n                            col_start: 18,\n                            col_end: Some(\n                                22,\n                            ),\n                        },\n                    },\n                    body: [\n                        StatementNode {\n                            kind: If {\n                                cond: ExpressionNode {\n                                    kind: Binary {\n                                        left: ExpressionNode {\n                                            kind: Binary {\n                                                left: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"n\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 36,\n                                                        row_end: Some(\n                                                            36,\n                                                        ),\n                                                        col_start: 28,\n                                                        col_end: Some(\n                                                            29,\n                                                        ),\n                                                    },\n                                                },\n                                                op: Modulo,\n                                                right: ExpressionNode {\n                                                    kind: Literal(\n                                                        Integer(\n                                                            2,\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 36,\n                                                        row_end: Some(\n                                                            36,\n                                                        ),\n                                                        col_start: 32,\n                                                        col_end: Some(\n                                                            33,\n                                                        ),\n                                                    },\n                                                },\n                                            },\n                                            span: Span {\n                                                row_start: 36,\n                                                row_end: Some(\n                                                    36,\n                                                ),\n                                                col_start: 28,\n                                                col_end: Some(\n                                                    33,\n                                                ),\n                                            },\n                                        },\n                                        op: Equal,\n                                        right: ExpressionNode {\n                                            kind: Literal(\n                                                Integer(\n                                                    0,\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 36,\n                                                row_end: Some(\n                                                    36,\n                                                ),\n                                                col_start: 37,\n                                                col_end: Some(\n                                                    38,\n                                                ),\n                                            },\n                                        },\n                                    },\n                                    span: Span {\n                                        row_start: 36,\n                                        row_end: Some(\n                                            36,\n                                        ),\n                                        col_start: 28,\n                                        col_end: Some(\n                                            38,\n                                        ),\n                                    },\n                                },\n                                then_block: [\n                                    StatementNode {\n                                        kind: Return(\n                                            Some(\n                                                ExpressionNode {\n                                                    kind: Call {\n                                                        func: ExpressionNode {\n                                                            kind: Identifier(\n                                                                \"Some\",\n                                                            ),\n                                                            span: Span {\n                                                                row_start: 36,\n                                                                row_end: Some(\n                                                                    36,\n                                                                ),\n                                                                col_start: 48,\n                                                                col_end: Some(\n                                                                    52,\n                                                                ),\n                                                            },\n                                                        },\n                                                        args: [\n                                                            ExpressionNode {\n                                                                kind: Identifier(\n                                                                    \"n\",\n                                                                ),\n                                                                span: Span {\n                                                                    row_start: 36,\n                                                                    row_end: Some(\n                                                                        36,\n                                                                    ),\n                                                                    col_start: 53,\n                                                                    col_end: Some(\n                                                                        54,\n                                                                    ),\n                                                                },\n                                                            },\n                                                        ],\n                                                    },\n                                                    span: Span {\n                                                        row_start: 36,\n                                                        row_end: Some(\n                                                            36,\n                                                        ),\n                                                        col_start: 48,\n                                                        col_end: Some(\n                                                            52,\n                                                        ),\n                                                    },\n                                                },\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 36,\n                                            row_end: Some(\n                                                36,\n                                            ),\n                                            col_start: 48,\n                                            col_end: Some(\n                                                52,\n                                            ),\n                                        },\n                                    },\n                                ],\n                                else_block: None,\n                            },\n                            span: Span {\n                                row_start: 36,\n                                row_end: Some(\n                                    36,\n                                ),\n                                col_start: 25,\n                                col_end: Some(\n                                    52,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 36,\n                    row_end: Some(\n                        36,\n                    ),\n                    col_start: 9,\n                    col_end: Some(\n                        52,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 35,\n            row_end: Some(\n                36,\n            ),\n            col_start: 1,\n            col_end: Some(\n                52,\n            ),\n        },\n    },\n)\n\nFunction(\n    FunctionNode {\n        name: \"map\",\n        type_params: [\n            (\n                \"T\",\n                [],\n            ),\n            (\n                \"U\",\n                [],\n            ),\n        ],\n        params: [\n            Param {\n                name: \"items\",\n                type_: TypeNode {\n                    kind: List(\n                        TypeNode {\n                            kind: Named(\n                                \"T\",\n                                [],\n                            ),\n                            span: Span {\n                                row_start: 39,\n                                row_end: Some(\n                                    39,\n                                ),\n                                col_start: 21,\n                                col_end: Some(\n                                    22,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 39,\n                        row_end: Some(\n                            39,\n                        ),\n                        col_start: 16,\n                        col_end: Some(\n                            20,\n                        ),\n                    },\n                },\n            },\n            Param {\n                name: \"transform\",\n                type_: TypeNode {\n                    kind: Function {\n                        params: [\n                            TypeNode {\n                                kind: Named(\n                                    \"T\",\n                                    [],\n                                ),\n                                span: Span {\n                                    row_start: 39,\n                                    row_end: Some(\n                                        39,\n                                    ),\n                                    col_start: 36,\n                                    col_end: Some(\n                                        37,\n                                    ),\n                                },\n                            },\n                        ],\n                        returns: TypeNode {\n                            kind: Named(\n                                \"U\",\n                                [],\n                            ),\n                            span: Span {\n                                row_start: 39,\n                                row_end: Some(\n                                    39,\n                                ),\n                                col_start: 47,\n                                col_end: Some(\n                                    48,\n                                ),\n                            },\n                        },\n                    },\n                    span: Span {\n                        row_start: 39,\n                        row_end: Some(\n                            39,\n                        ),\n                        col_start: 31,\n                        col_end: Some(\n                            35,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: List(\n                TypeNode {\n                    kind: Named(\n                        \"U\",\n                        [],\n                    ),\n                    span: Span {\n                        row_start: 39,\n                        row_end: Some(\n                            39,\n                        ),\n                        col_start: 73,\n                        col_end: Some(\n                            74,\n                        ),\n                    },\n                },\n            ),\n            span: Span {\n                row_start: 39,\n                row_end: Some(\n                    39,\n                ),\n                col_start: 68,\n                col_end: Some(\n                    72,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: AutoDecl(\n                    \"out\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 40,\n                            row_end: Some(\n                                40,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                13,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: FieldAccess {\n                                    expr: ExpressionNode {\n                                        kind: Identifier(\n                                            \"list\",\n                                        ),\n                                        span: Span {\n                                            row_start: 40,\n                                            row_end: Some(\n                                                40,\n                                            ),\n                                            col_start: 16,\n                                            col_end: Some(\n                                                20,\n                                            ),\n                                        },\n                                    },\n                                    field: \"new\",\n                                },\n                                span: Span {\n                                    row_start: 40,\n                                    row_end: Some(\n                                        40,\n                                    ),\n                                    col_start: 16,\n                                    col_end: Some(\n                                        27,\n                                    ),\n                                },\n                            },\n                            args: [],\n                        },\n                        span: Span {\n                            row_start: 40,\n                            row_end: Some(\n                                40,\n                            ),\n                            col_start: 16,\n                            col_end: Some(\n                                27,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 40,\n                    row_end: Some(\n                        40,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        27,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: For {\n                    var: \"item\",\n                    var_type: TypeNode {\n                        kind: Named(\n                            \"U\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 41,\n                            row_end: Some(\n                                41,\n                            ),\n                            col_start: 9,\n                            col_end: Some(\n                                10,\n                            ),\n                        },\n                    },\n                    iter: ExpressionNode {\n                        kind: Identifier(\n                            \"items\",\n                        ),\n                        span: Span {\n                            row_start: 41,\n                            row_end: Some(\n                                41,\n                            ),\n                            col_start: 19,\n                            col_end: Some(\n                                24,\n                            ),\n                        },\n                    },\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: FieldAccess {\n                                                expr: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"out\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 41,\n                                                        row_end: Some(\n                                                            41,\n                                                        ),\n                                                        col_start: 27,\n                                                        col_end: Some(\n                                                            30,\n                                                        ),\n                                                    },\n                                                },\n                                                field: \"append\",\n                                            },\n                                            span: Span {\n                                                row_start: 41,\n                                                row_end: Some(\n                                                    41,\n                                                ),\n                                                col_start: 27,\n                                                col_end: Some(\n                                                    37,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Call {\n                                                    func: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"transform\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 41,\n                                                            row_end: Some(\n                                                                41,\n                                                            ),\n                                                            col_start: 38,\n                                                            col_end: Some(\n                                                                47,\n                                                            ),\n                                                        },\n                                                    },\n                                                    args: [\n                                                        ExpressionNode {\n                                                            kind: Identifier(\n                                                                \"item\",\n                                                            ),\n                                                            span: Span {\n                                                                row_start: 41,\n                                                                row_end: Some(\n                                                                    41,\n                                                                ),\n                                                                col_start: 48,\n                                                                col_end: Some(\n                                                                    52,\n                                                                ),\n                                                            },\n                                                        },\n                                                    ],\n                                                },\n                                                span: Span {\n                                                    row_start: 41,\n                                                    row_end: Some(\n                                                        41,\n                                                    ),\n                                                    col_start: 38,\n                                                    col_end: Some(\n                                                        47,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 41,\n                                        row_end: Some(\n                                            41,\n                                        ),\n                                        col_start: 27,\n                                        col_end: Some(\n                                            37,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 41,\n                                row_end: Some(\n                                    41,\n                                ),\n                                col_start: 27,\n                                col_end: Some(\n                                    37,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 41,\n                    row_end: Some(\n                        41,\n                    ),\n                    col_start: 9,\n                    col_end: Some(\n                        37,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Return(\n                    Some(\n                        ExpressionNode {\n                            kind: Identifier(\n                                \"out\",\n                            ),\n                            span: Span {\n                                row_start: 42,\n                                row_end: Some(\n                                    42,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    15,\n                                ),\n                            },\n                        },\n                    ),\n                ),\n                span: Span {\n                    row_start: 42,\n                    row_end: Some(\n                        42,\n                    ),\n                    col_start: 12,\n                    col_end: Some(\n                        15,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 39,\n            row_end: Some(\n                42,\n            ),\n            col_start: 1,\n            col_end: Some(\n                15,\n            ),\n        },\n    },\n)\n\nFunction(\n    FunctionNode {\n        name: \"main\",\n        type_params: [],\n        params: [],\n        return_type: TypeNode {\n            kind: Primitive(\n                Void,\n            ),\n            span: Span {\n                row_start: 45,\n                row_end: Some(\n                    45,\n                ),\n                col_start: 21,\n                col_end: Some(\n                    25,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: AutoDecl(\n                    \"explicit\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 46,\n                            row_end: Some(\n                                46,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                18,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                10,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 46,\n                            row_end: Some(\n                                46,\n                            ),\n                            col_start: 21,\n                            col_end: Some(\n                                23,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 46,\n                    row_end: Some(\n                        46,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        23,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"inferred\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 47,\n                            row_end: Some(\n                                47,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                18,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                42,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 47,\n                            row_end: Some(\n                                47,\n                            ),\n                            col_start: 21,\n                            col_end: Some(\n                                23,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 47,\n                    row_end: Some(\n                        47,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        23,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"floatVal\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 48,\n                            row_end: Some(\n                                48,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                18,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Literal(\n                            Float(\n                                9.4,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 48,\n                            row_end: Some(\n                                48,\n                            ),\n                            col_start: 21,\n                            col_end: Some(\n                                24,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 48,\n                    row_end: Some(\n                        48,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        24,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: If {\n                    cond: ExpressionNode {\n                        kind: Binary {\n                            left: ExpressionNode {\n                                kind: Identifier(\n                                    \"inferred\",\n                                ),\n                                span: Span {\n                                    row_start: 50,\n                                    row_end: Some(\n                                        50,\n                                    ),\n                                    col_start: 8,\n                                    col_end: Some(\n                                        16,\n                                    ),\n                                },\n                            },\n                            op: Greater,\n                            right: ExpressionNode {\n                                kind: Literal(\n                                    Integer(\n                                        40,\n                                    ),\n                                ),\n                                span: Span {\n                                    row_start: 50,\n                                    row_end: Some(\n                                        50,\n                                    ),\n                                    col_start: 19,\n                                    col_end: Some(\n                                        21,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 50,\n                            row_end: Some(\n                                50,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                21,\n                            ),\n                        },\n                    },\n                    then_block: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"print\",\n                                            ),\n                                            span: Span {\n                                                row_start: 50,\n                                                row_end: Some(\n                                                    50,\n                                                ),\n                                                col_start: 24,\n                                                col_end: Some(\n                                                    29,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    String(\n                                                        \"Big number\",\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 50,\n                                                    row_end: Some(\n                                                        50,\n                                                    ),\n                                                    col_start: 30,\n                                                    col_end: Some(\n                                                        42,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 50,\n                                        row_end: Some(\n                                            50,\n                                        ),\n                                        col_start: 24,\n                                        col_end: Some(\n                                            29,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 50,\n                                row_end: Some(\n                                    50,\n                                ),\n                                col_start: 24,\n                                col_end: Some(\n                                    29,\n                                ),\n                            },\n                        },\n                    ],\n                    else_block: Some(\n                        [\n                            StatementNode {\n                                kind: Expression(\n                                    ExpressionNode {\n                                        kind: Call {\n                                            func: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"print\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 50,\n                                                    row_end: Some(\n                                                        50,\n                                                    ),\n                                                    col_start: 53,\n                                                    col_end: Some(\n                                                        58,\n                                                    ),\n                                                },\n                                            },\n                                            args: [\n                                                ExpressionNode {\n                                                    kind: Literal(\n                                                        String(\n                                                            \"Small number\",\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 50,\n                                                        row_end: Some(\n                                                            50,\n                                                        ),\n                                                        col_start: 59,\n                                                        col_end: Some(\n                                                            73,\n                                                        ),\n                                                    },\n                                                },\n                                            ],\n                                        },\n                                        span: Span {\n                                            row_start: 50,\n                                            row_end: Some(\n                                                50,\n                                            ),\n                                            col_start: 53,\n                                            col_end: Some(\n                                                58,\n                                            ),\n                                        },\n                                    },\n                                ),\n                                span: Span {\n                                    row_start: 50,\n                                    row_end: Some(\n                                        50,\n                                    ),\n                                    col_start: 53,\n                                    col_end: Some(\n                                        58,\n                                    ),\n                                },\n                            },\n                        ],\n                    ),\n                },\n                span: Span {\n                    row_start: 50,\n                    row_end: Some(\n                        50,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        58,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"maybeNum\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 52,\n                            row_end: Some(\n                                52,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                18,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"Some\",\n                                ),\n                                span: Span {\n                                    row_start: 52,\n                                    row_end: Some(\n                                        52,\n                                    ),\n                                    col_start: 21,\n                                    col_end: Some(\n                                        25,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            15,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 52,\n                                        row_end: Some(\n                                            52,\n                                        ),\n                                        col_start: 26,\n                                        col_end: Some(\n                                            28,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 52,\n                            row_end: Some(\n                                52,\n                            ),\n                            col_start: 21,\n                            col_end: Some(\n                                25,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 52,\n                    row_end: Some(\n                        52,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        25,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Match {\n                    expr: ExpressionNode {\n                        kind: Identifier(\n                            \"maybeNum\",\n                        ),\n                        span: Span {\n                            row_start: 53,\n                            row_end: Some(\n                                53,\n                            ),\n                            col_start: 11,\n                            col_end: Some(\n                                19,\n                            ),\n                        },\n                    },\n                    arms: [\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"Some\",\n                                args: [\n                                    Identifier(\n                                        \"v\",\n                                    ),\n                                ],\n                            },\n                            guard: Some(\n                                ExpressionNode {\n                                    kind: Binary {\n                                        left: ExpressionNode {\n                                            kind: Identifier(\n                                                \"v\",\n                                            ),\n                                            span: Span {\n                                                row_start: 54,\n                                                row_end: Some(\n                                                    54,\n                                                ),\n                                                col_start: 20,\n                                                col_end: Some(\n                                                    21,\n                                                ),\n                                            },\n                                        },\n                                        op: Greater,\n                                        right: ExpressionNode {\n                                            kind: Literal(\n                                                Integer(\n                                                    10,\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 54,\n                                                row_end: Some(\n                                                    54,\n                                                ),\n                                                col_start: 24,\n                                                col_end: Some(\n                                                    26,\n                                                ),\n                                            },\n                                        },\n                                    },\n                                    span: Span {\n                                        row_start: 54,\n                                        row_end: Some(\n                                            54,\n                                        ),\n                                        col_start: 20,\n                                        col_end: Some(\n                                            26,\n                                        ),\n                                    },\n                                },\n                            ),\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 54,\n                                                        row_end: Some(\n                                                            54,\n                                                        ),\n                                                        col_start: 29,\n                                                        col_end: Some(\n                                                            34,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Binary {\n                                                            left: ExpressionNode {\n                                                                kind: Literal(\n                                                                    String(\n                                                                        \"Large value: \",\n                                                                    ),\n                                                                ),\n                                                                span: Span {\n                                                                    row_start: 54,\n                                                                    row_end: Some(\n                                                                        54,\n                                                                    ),\n                                                                    col_start: 35,\n                                                                    col_end: Some(\n                                                                        50,\n                                                                    ),\n                                                                },\n                                                            },\n                                                            op: Add,\n                                                            right: ExpressionNode {\n                                                                kind: Identifier(\n                                                                    \"v\",\n                                                                ),\n                                                                span: Span {\n                                                                    row_start: 54,\n                                                                    row_end: Some(\n                                                                        54,\n                                                                    ),\n                                                                    col_start: 53,\n                                                                    col_end: Some(\n                                                                        54,\n                                                                    ),\n                                                                },\n                                                            },\n                                                        },\n                                                        span: Span {\n                                                            row_start: 54,\n                                                            row_end: Some(\n                                                                54,\n                                                            ),\n                                                            col_start: 35,\n                                                            col_end: Some(\n                                                                54,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 54,\n                                                row_end: Some(\n                                                    54,\n                                                ),\n                                                col_start: 29,\n                                                col_end: Some(\n                                                    34,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 54,\n                                        row_end: Some(\n                                            54,\n                                        ),\n                                        col_start: 29,\n                                        col_end: Some(\n                                            34,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"Some\",\n                                args: [\n                                    Identifier(\n                                        \"v\",\n                                    ),\n                                ],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 55,\n                                                        row_end: Some(\n                                                            55,\n                                                        ),\n                                                        col_start: 19,\n                                                        col_end: Some(\n                                                            24,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Binary {\n                                                            left: ExpressionNode {\n                                                                kind: Literal(\n                                                                    String(\n                                                                        \"Small value: \",\n                                                                    ),\n                                                                ),\n                                                                span: Span {\n                                                                    row_start: 55,\n                                                                    row_end: Some(\n                                                                        55,\n                                                                    ),\n                                                                    col_start: 25,\n                                                                    col_end: Some(\n                                                                        40,\n                                                                    ),\n                                                                },\n                                                            },\n                                                            op: Add,\n                                                            right: ExpressionNode {\n                                                                kind: Identifier(\n                                                                    \"v\",\n                                                                ),\n                                                                span: Span {\n                                                                    row_start: 55,\n                                                                    row_end: Some(\n                                                                        55,\n                                                                    ),\n                                                                    col_start: 43,\n                                                                    col_end: Some(\n                                                                        44,\n                                                                    ),\n                                                                },\n                                                            },\n                                                        },\n                                                        span: Span {\n                                                            row_start: 55,\n                                                            row_end: Some(\n                                                                55,\n                                                            ),\n                                                            col_start: 25,\n                                                            col_end: Some(\n                                                                44,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 55,\n                                                row_end: Some(\n                                                    55,\n                                                ),\n                                                col_start: 19,\n                                                col_end: Some(\n                                                    24,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 55,\n                                        row_end: Some(\n                                            55,\n                                        ),\n                                        col_start: 19,\n                                        col_end: Some(\n                                            24,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"None\",\n                                args: [],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 56,\n                                                        row_end: Some(\n                                                            56,\n                                                        ),\n                                                        col_start: 16,\n                                                        col_end: Some(\n                                                            21,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"No value\",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 56,\n                                                            row_end: Some(\n                                                                56,\n                                                            ),\n                                                            col_start: 22,\n                                                            col_end: Some(\n                                                                32,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 56,\n                                                row_end: Some(\n                                                    56,\n                                                ),\n                                                col_start: 16,\n                                                col_end: Some(\n                                                    21,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 56,\n                                        row_end: Some(\n                                            56,\n                                        ),\n                                        col_start: 16,\n                                        col_end: Some(\n                                            21,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        MatchArm {\n                            pattern: Wildcard,\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 57,\n                                                        row_end: Some(\n                                                            57,\n                                                        ),\n                                                        col_start: 13,\n                                                        col_end: Some(\n                                                            18,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"Unexpected\",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 57,\n                                                            row_end: Some(\n                                                                57,\n                                                            ),\n                                                            col_start: 19,\n                                                            col_end: Some(\n                                                                31,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 57,\n                                                row_end: Some(\n                                                    57,\n                                                ),\n                                                col_start: 13,\n                                                col_end: Some(\n                                                    18,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 57,\n                                        row_end: Some(\n                                            57,\n                                        ),\n                                        col_start: 13,\n                                        col_end: Some(\n                                            18,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 53,\n                    row_end: Some(\n                        53,\n                    ),\n                    col_start: 11,\n                    col_end: Some(\n                        19,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"nums\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 60,\n                            row_end: Some(\n                                60,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                14,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: ListLiteral(\n                            [\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            1,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 60,\n                                        row_end: Some(\n                                            60,\n                                        ),\n                                        col_start: 18,\n                                        col_end: Some(\n                                            19,\n                                        ),\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            2,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 60,\n                                        row_end: Some(\n                                            60,\n                                        ),\n                                        col_start: 21,\n                                        col_end: Some(\n                                            22,\n                                        ),\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            3,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 60,\n                                        row_end: Some(\n                                            60,\n                                        ),\n                                        col_start: 24,\n                                        col_end: Some(\n                                            25,\n                                        ),\n                                    },\n                                },\n                            ],\n                        ),\n                        span: Span {\n                            row_start: 60,\n                            row_end: None,\n                            col_start: 17,\n                            col_end: None,\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 60,\n                    row_end: Some(\n                        60,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"cirs\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 61,\n                            row_end: Some(\n                                61,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                14,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: ListLiteral(\n                            [\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"Circle\",\n                                            ),\n                                            span: Span {\n                                                row_start: 61,\n                                                row_end: Some(\n                                                    61,\n                                                ),\n                                                col_start: 18,\n                                                col_end: Some(\n                                                    24,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Float(\n                                                        2.0,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 61,\n                                                    row_end: Some(\n                                                        61,\n                                                    ),\n                                                    col_start: 25,\n                                                    col_end: Some(\n                                                        28,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 61,\n                                        row_end: Some(\n                                            61,\n                                        ),\n                                        col_start: 18,\n                                        col_end: Some(\n                                            24,\n                                        ),\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"Circle\",\n                                            ),\n                                            span: Span {\n                                                row_start: 61,\n                                                row_end: Some(\n                                                    61,\n                                                ),\n                                                col_start: 31,\n                                                col_end: Some(\n                                                    37,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Float(\n                                                        3.5,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 61,\n                                                    row_end: Some(\n                                                        61,\n                                                    ),\n                                                    col_start: 38,\n                                                    col_end: Some(\n                                                        41,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 61,\n                                        row_end: Some(\n                                            61,\n                                        ),\n                                        col_start: 31,\n                                        col_end: Some(\n                                            37,\n                                        ),\n                                    },\n                                },\n                            ],\n                        ),\n                        span: Span {\n                            row_start: 61,\n                            row_end: None,\n                            col_start: 17,\n                            col_end: None,\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 61,\n                    row_end: Some(\n                        61,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: For {\n                    var: \"c\",\n                    var_type: TypeNode {\n                        kind: Named(\n                            \"Circle\",\n                            [],\n                        ),\n                        span: Span {\n                            row_start: 62,\n                            row_end: Some(\n                                62,\n                            ),\n                            col_start: 9,\n                            col_end: Some(\n                                15,\n                            ),\n                        },\n                    },\n                    iter: ExpressionNode {\n                        kind: Identifier(\n                            \"cirs\",\n                        ),\n                        span: Span {\n                            row_start: 62,\n                            row_end: Some(\n                                62,\n                            ),\n                            col_start: 21,\n                            col_end: Some(\n                                25,\n                            ),\n                        },\n                    },\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: FieldAccess {\n                                                expr: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"c\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 62,\n                                                        row_end: Some(\n                                                            62,\n                                                        ),\n                                                        col_start: 28,\n                                                        col_end: Some(\n                                                            29,\n                                                        ),\n                                                    },\n                                                },\n                                                field: \"draw\",\n                                            },\n                                            span: Span {\n                                                row_start: 62,\n                                                row_end: Some(\n                                                    62,\n                                                ),\n                                                col_start: 28,\n                                                col_end: Some(\n                                                    34,\n                                                ),\n                                            },\n                                        },\n                                        args: [],\n                                    },\n                                    span: Span {\n                                        row_start: 62,\n                                        row_end: Some(\n                                            62,\n                                        ),\n                                        col_start: 28,\n                                        col_end: Some(\n                                            34,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 62,\n                                row_end: Some(\n                                    62,\n                                ),\n                                col_start: 28,\n                                col_end: Some(\n                                    34,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 62,\n                    row_end: Some(\n                        62,\n                    ),\n                    col_start: 9,\n                    col_end: Some(\n                        34,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"maximum\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 64,\n                            row_end: Some(\n                                64,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                17,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"max\",\n                                ),\n                                span: Span {\n                                    row_start: 64,\n                                    row_end: Some(\n                                        64,\n                                    ),\n                                    col_start: 20,\n                                    col_end: Some(\n                                        23,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            7,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 64,\n                                        row_end: Some(\n                                            64,\n                                        ),\n                                        col_start: 24,\n                                        col_end: Some(\n                                            25,\n                                        ),\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            12,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 64,\n                                        row_end: Some(\n                                            64,\n                                        ),\n                                        col_start: 27,\n                                        col_end: Some(\n                                            29,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 64,\n                            row_end: Some(\n                                64,\n                            ),\n                            col_start: 20,\n                            col_end: Some(\n                                23,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 64,\n                    row_end: Some(\n                        64,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        23,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"stack\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 65,\n                            row_end: Some(\n                                65,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                15,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"Stack\",\n                                ),\n                                span: Span {\n                                    row_start: 65,\n                                    row_end: Some(\n                                        65,\n                                    ),\n                                    col_start: 18,\n                                    col_end: Some(\n                                        23,\n                                    ),\n                                },\n                            },\n                            args: [],\n                        },\n                        span: Span {\n                            row_start: 65,\n                            row_end: Some(\n                                65,\n                            ),\n                            col_start: 18,\n                            col_end: Some(\n                                23,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 65,\n                    row_end: Some(\n                        65,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        23,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Expression(\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: FieldAccess {\n                                    expr: ExpressionNode {\n                                        kind: Identifier(\n                                            \"stack\",\n                                        ),\n                                        span: Span {\n                                            row_start: 66,\n                                            row_end: Some(\n                                                66,\n                                            ),\n                                            col_start: 5,\n                                            col_end: Some(\n                                                10,\n                                            ),\n                                        },\n                                    },\n                                    field: \"push\",\n                                },\n                                span: Span {\n                                    row_start: 66,\n                                    row_end: Some(\n                                        66,\n                                    ),\n                                    col_start: 5,\n                                    col_end: Some(\n                                        15,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            99,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 66,\n                                        row_end: Some(\n                                            66,\n                                        ),\n                                        col_start: 16,\n                                        col_end: Some(\n                                            18,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 66,\n                            row_end: Some(\n                                66,\n                            ),\n                            col_start: 5,\n                            col_end: Some(\n                                15,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 66,\n                    row_end: Some(\n                        66,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        15,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"popped\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 67,\n                            row_end: Some(\n                                67,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                16,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: FieldAccess {\n                                    expr: ExpressionNode {\n                                        kind: Identifier(\n                                            \"stack\",\n                                        ),\n                                        span: Span {\n                                            row_start: 67,\n                                            row_end: Some(\n                                                67,\n                                            ),\n                                            col_start: 19,\n                                            col_end: Some(\n                                                24,\n                                            ),\n                                        },\n                                    },\n                                    field: \"pop\",\n                                },\n                                span: Span {\n                                    row_start: 67,\n                                    row_end: Some(\n                                        67,\n                                    ),\n                                    col_start: 19,\n                                    col_end: Some(\n                                        28,\n                                    ),\n                                },\n                            },\n                            args: [],\n                        },\n                        span: Span {\n                            row_start: 67,\n                            row_end: Some(\n                                67,\n                            ),\n                            col_start: 19,\n                            col_end: Some(\n                                28,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 67,\n                    row_end: Some(\n                        67,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        28,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"res\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 69,\n                            row_end: Some(\n                                69,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                13,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"divide\",\n                                ),\n                                span: Span {\n                                    row_start: 69,\n                                    row_end: Some(\n                                        69,\n                                    ),\n                                    col_start: 16,\n                                    col_end: Some(\n                                        22,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            10,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 69,\n                                        row_end: Some(\n                                            69,\n                                        ),\n                                        col_start: 23,\n                                        col_end: Some(\n                                            25,\n                                        ),\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Literal(\n                                        Integer(\n                                            2,\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 69,\n                                        row_end: Some(\n                                            69,\n                                        ),\n                                        col_start: 27,\n                                        col_end: Some(\n                                            28,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 69,\n                            row_end: Some(\n                                69,\n                            ),\n                            col_start: 16,\n                            col_end: Some(\n                                22,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 69,\n                    row_end: Some(\n                        69,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        22,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Match {\n                    expr: ExpressionNode {\n                        kind: Identifier(\n                            \"res\",\n                        ),\n                        span: Span {\n                            row_start: 70,\n                            row_end: Some(\n                                70,\n                            ),\n                            col_start: 11,\n                            col_end: Some(\n                                14,\n                            ),\n                        },\n                    },\n                    arms: [\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"Ok\",\n                                args: [\n                                    Identifier(\n                                        \"v\",\n                                    ),\n                                ],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 70,\n                                                        row_end: Some(\n                                                            70,\n                                                        ),\n                                                        col_start: 25,\n                                                        col_end: Some(\n                                                            30,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"v\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 70,\n                                                            row_end: Some(\n                                                                70,\n                                                            ),\n                                                            col_start: 31,\n                                                            col_end: Some(\n                                                                32,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 70,\n                                                row_end: Some(\n                                                    70,\n                                                ),\n                                                col_start: 25,\n                                                col_end: Some(\n                                                    30,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 70,\n                                        row_end: Some(\n                                            70,\n                                        ),\n                                        col_start: 25,\n                                        col_end: Some(\n                                            30,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"Err\",\n                                args: [\n                                    Identifier(\n                                        \"e\",\n                                    ),\n                                ],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 70,\n                                                        row_end: Some(\n                                                            70,\n                                                        ),\n                                                        col_start: 45,\n                                                        col_end: Some(\n                                                            50,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"e\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 70,\n                                                            row_end: Some(\n                                                                70,\n                                                            ),\n                                                            col_start: 51,\n                                                            col_end: Some(\n                                                                52,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 70,\n                                                row_end: Some(\n                                                    70,\n                                                ),\n                                                col_start: 45,\n                                                col_end: Some(\n                                                    50,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 70,\n                                        row_end: Some(\n                                            70,\n                                        ),\n                                        col_start: 45,\n                                        col_end: Some(\n                                            50,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 70,\n                    row_end: Some(\n                        70,\n                    ),\n                    col_start: 11,\n                    col_end: Some(\n                        14,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Match {\n                    expr: ExpressionNode {\n                        kind: Identifier(\n                            \"res\",\n                        ),\n                        span: Span {\n                            row_start: 71,\n                            row_end: Some(\n                                71,\n                            ),\n                            col_start: 11,\n                            col_end: Some(\n                                14,\n                            ),\n                        },\n                    },\n                    arms: [\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"Ok\",\n                                args: [\n                                    Identifier(\n                                        \"v\",\n                                    ),\n                                ],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 73,\n                                                        row_end: Some(\n                                                            73,\n                                                        ),\n                                                        col_start: 13,\n                                                        col_end: Some(\n                                                            18,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"got a good val\",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 73,\n                                                            row_end: Some(\n                                                                73,\n                                                            ),\n                                                            col_start: 19,\n                                                            col_end: Some(\n                                                                35,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 73,\n                                                row_end: Some(\n                                                    73,\n                                                ),\n                                                col_start: 13,\n                                                col_end: Some(\n                                                    18,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 73,\n                                        row_end: Some(\n                                            73,\n                                        ),\n                                        col_start: 13,\n                                        col_end: Some(\n                                            18,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"Err\",\n                                args: [\n                                    Identifier(\n                                        \"e\",\n                                    ),\n                                ],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 76,\n                                                        row_end: Some(\n                                                            76,\n                                                        ),\n                                                        col_start: 13,\n                                                        col_end: Some(\n                                                            18,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"got a bad val\",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 76,\n                                                            row_end: Some(\n                                                                76,\n                                                            ),\n                                                            col_start: 19,\n                                                            col_end: Some(\n                                                                34,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 76,\n                                                row_end: Some(\n                                                    76,\n                                                ),\n                                                col_start: 13,\n                                                col_end: Some(\n                                                    18,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 76,\n                                        row_end: Some(\n                                            76,\n                                        ),\n                                        col_start: 13,\n                                        col_end: Some(\n                                            18,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 71,\n                    row_end: Some(\n                        71,\n                    ),\n                    col_start: 11,\n                    col_end: Some(\n                        14,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"maybeEven\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 80,\n                            row_end: Some(\n                                80,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                19,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"findEven\",\n                                ),\n                                span: Span {\n                                    row_start: 80,\n                                    row_end: Some(\n                                        80,\n                                    ),\n                                    col_start: 22,\n                                    col_end: Some(\n                                        30,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: ListLiteral(\n                                        [\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        1,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 80,\n                                                    row_end: Some(\n                                                        80,\n                                                    ),\n                                                    col_start: 32,\n                                                    col_end: Some(\n                                                        33,\n                                                    ),\n                                                },\n                                            },\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        3,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 80,\n                                                    row_end: Some(\n                                                        80,\n                                                    ),\n                                                    col_start: 35,\n                                                    col_end: Some(\n                                                        36,\n                                                    ),\n                                                },\n                                            },\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        4,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 80,\n                                                    row_end: Some(\n                                                        80,\n                                                    ),\n                                                    col_start: 38,\n                                                    col_end: Some(\n                                                        39,\n                                                    ),\n                                                },\n                                            },\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        7,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 80,\n                                                    row_end: Some(\n                                                        80,\n                                                    ),\n                                                    col_start: 41,\n                                                    col_end: Some(\n                                                        42,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    ),\n                                    span: Span {\n                                        row_start: 80,\n                                        row_end: None,\n                                        col_start: 31,\n                                        col_end: None,\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 80,\n                            row_end: Some(\n                                80,\n                            ),\n                            col_start: 22,\n                            col_end: Some(\n                                30,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 80,\n                    row_end: Some(\n                        80,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        30,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Match {\n                    expr: ExpressionNode {\n                        kind: Identifier(\n                            \"maybeEven\",\n                        ),\n                        span: Span {\n                            row_start: 81,\n                            row_end: Some(\n                                81,\n                            ),\n                            col_start: 11,\n                            col_end: Some(\n                                20,\n                            ),\n                        },\n                    },\n                    arms: [\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"Some\",\n                                args: [\n                                    Identifier(\n                                        \"v\",\n                                    ),\n                                ],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 81,\n                                                        row_end: Some(\n                                                            81,\n                                                        ),\n                                                        col_start: 33,\n                                                        col_end: Some(\n                                                            38,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"v\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 81,\n                                                            row_end: Some(\n                                                                81,\n                                                            ),\n                                                            col_start: 39,\n                                                            col_end: Some(\n                                                                40,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 81,\n                                                row_end: Some(\n                                                    81,\n                                                ),\n                                                col_start: 33,\n                                                col_end: Some(\n                                                    38,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 81,\n                                        row_end: Some(\n                                            81,\n                                        ),\n                                        col_start: 33,\n                                        col_end: Some(\n                                            38,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        MatchArm {\n                            pattern: EnumVariant {\n                                name: \"None\",\n                                args: [],\n                            },\n                            guard: None,\n                            body: [\n                                StatementNode {\n                                    kind: Expression(\n                                        ExpressionNode {\n                                            kind: Call {\n                                                func: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"print\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 81,\n                                                        row_end: Some(\n                                                            81,\n                                                        ),\n                                                        col_start: 51,\n                                                        col_end: Some(\n                                                            56,\n                                                        ),\n                                                    },\n                                                },\n                                                args: [\n                                                    ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"None\",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 81,\n                                                            row_end: Some(\n                                                                81,\n                                                            ),\n                                                            col_start: 57,\n                                                            col_end: Some(\n                                                                63,\n                                                            ),\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                            span: Span {\n                                                row_start: 81,\n                                                row_end: Some(\n                                                    81,\n                                                ),\n                                                col_start: 51,\n                                                col_end: Some(\n                                                    56,\n                                                ),\n                                            },\n                                        },\n                                    ),\n                                    span: Span {\n                                        row_start: 81,\n                                        row_end: Some(\n                                            81,\n                                        ),\n                                        col_start: 51,\n                                        col_end: Some(\n                                            56,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 81,\n                    row_end: Some(\n                        81,\n                    ),\n                    col_start: 11,\n                    col_end: Some(\n                        20,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"square\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 83,\n                            row_end: Some(\n                                83,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                16,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Lambda {\n                            params: [\n                                Param {\n                                    name: \"int\",\n                                    type_: TypeNode {\n                                        kind: Named(\n                                            \"n\",\n                                            [],\n                                        ),\n                                        span: Span {\n                                            row_start: 83,\n                                            row_end: Some(\n                                                83,\n                                            ),\n                                            col_start: 28,\n                                            col_end: Some(\n                                                29,\n                                            ),\n                                        },\n                                    },\n                                },\n                            ],\n                            body: [\n                                StatementNode {\n                                    kind: Return(\n                                        Some(\n                                            ExpressionNode {\n                                                kind: Binary {\n                                                    left: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"n\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 83,\n                                                            row_end: Some(\n                                                                83,\n                                                            ),\n                                                            col_start: 52,\n                                                            col_end: Some(\n                                                                53,\n                                                            ),\n                                                        },\n                                                    },\n                                                    op: Multiply,\n                                                    right: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"n\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 83,\n                                                            row_end: Some(\n                                                                83,\n                                                            ),\n                                                            col_start: 56,\n                                                            col_end: Some(\n                                                                57,\n                                                            ),\n                                                        },\n                                                    },\n                                                },\n                                                span: Span {\n                                                    row_start: 83,\n                                                    row_end: Some(\n                                                        83,\n                                                    ),\n                                                    col_start: 52,\n                                                    col_end: Some(\n                                                        57,\n                                                    ),\n                                                },\n                                            },\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 83,\n                                        row_end: Some(\n                                            83,\n                                        ),\n                                        col_start: 52,\n                                        col_end: Some(\n                                            57,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 83,\n                            row_end: Some(\n                                83,\n                            ),\n                            col_start: 19,\n                            col_end: Some(\n                                57,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 83,\n                    row_end: Some(\n                        83,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        57,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"doubled\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 84,\n                            row_end: Some(\n                                84,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                17,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"map\",\n                                ),\n                                span: Span {\n                                    row_start: 84,\n                                    row_end: Some(\n                                        84,\n                                    ),\n                                    col_start: 20,\n                                    col_end: Some(\n                                        23,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: ListLiteral(\n                                        [\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        1,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 84,\n                                                    row_end: Some(\n                                                        84,\n                                                    ),\n                                                    col_start: 25,\n                                                    col_end: Some(\n                                                        26,\n                                                    ),\n                                                },\n                                            },\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        2,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 84,\n                                                    row_end: Some(\n                                                        84,\n                                                    ),\n                                                    col_start: 28,\n                                                    col_end: Some(\n                                                        29,\n                                                    ),\n                                                },\n                                            },\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        3,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 84,\n                                                    row_end: Some(\n                                                        84,\n                                                    ),\n                                                    col_start: 31,\n                                                    col_end: Some(\n                                                        32,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    ),\n                                    span: Span {\n                                        row_start: 84,\n                                        row_end: None,\n                                        col_start: 24,\n                                        col_end: None,\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Lambda {\n                                        params: [\n                                            Param {\n                                                name: \"int\",\n                                                type_: TypeNode {\n                                                    kind: Named(\n                                                        \"x\",\n                                                        [],\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 84,\n                                                        row_end: Some(\n                                                            84,\n                                                        ),\n                                                        col_start: 44,\n                                                        col_end: Some(\n                                                            45,\n                                                        ),\n                                                    },\n                                                },\n                                            },\n                                        ],\n                                        body: [\n                                            StatementNode {\n                                                kind: Return(\n                                                    Some(\n                                                        ExpressionNode {\n                                                            kind: Binary {\n                                                                left: ExpressionNode {\n                                                                    kind: Identifier(\n                                                                        \"x\",\n                                                                    ),\n                                                                    span: Span {\n                                                                        row_start: 84,\n                                                                        row_end: Some(\n                                                                            84,\n                                                                        ),\n                                                                        col_start: 68,\n                                                                        col_end: Some(\n                                                                            69,\n                                                                        ),\n                                                                    },\n                                                                },\n                                                                op: Multiply,\n                                                                right: ExpressionNode {\n                                                                    kind: Literal(\n                                                                        Integer(\n                                                                            2,\n                                                                        ),\n                                                                    ),\n                                                                    span: Span {\n                                                                        row_start: 84,\n                                                                        row_end: Some(\n                                                                            84,\n                                                                        ),\n                                                                        col_start: 72,\n                                                                        col_end: Some(\n                                                                            73,\n                                                                        ),\n                                                                    },\n                                                                },\n                                                            },\n                                                            span: Span {\n                                                                row_start: 84,\n                                                                row_end: Some(\n                                                                    84,\n                                                                ),\n                                                                col_start: 68,\n                                                                col_end: Some(\n                                                                    73,\n                                                                ),\n                                                            },\n                                                        },\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 84,\n                                                    row_end: Some(\n                                                        84,\n                                                    ),\n                                                    col_start: 68,\n                                                    col_end: Some(\n                                                        73,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 84,\n                                        row_end: Some(\n                                            84,\n                                        ),\n                                        col_start: 35,\n                                        col_end: Some(\n                                            73,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 84,\n                            row_end: Some(\n                                84,\n                            ),\n                            col_start: 20,\n                            col_end: Some(\n                                23,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 84,\n                    row_end: Some(\n                        84,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        23,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"squared\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 85,\n                            row_end: Some(\n                                85,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                17,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Call {\n                            func: ExpressionNode {\n                                kind: Identifier(\n                                    \"map\",\n                                ),\n                                span: Span {\n                                    row_start: 85,\n                                    row_end: Some(\n                                        85,\n                                    ),\n                                    col_start: 20,\n                                    col_end: Some(\n                                        23,\n                                    ),\n                                },\n                            },\n                            args: [\n                                ExpressionNode {\n                                    kind: ListLiteral(\n                                        [\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        1,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 85,\n                                                    row_end: Some(\n                                                        85,\n                                                    ),\n                                                    col_start: 25,\n                                                    col_end: Some(\n                                                        26,\n                                                    ),\n                                                },\n                                            },\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        2,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 85,\n                                                    row_end: Some(\n                                                        85,\n                                                    ),\n                                                    col_start: 28,\n                                                    col_end: Some(\n                                                        29,\n                                                    ),\n                                                },\n                                            },\n                                            ExpressionNode {\n                                                kind: Literal(\n                                                    Integer(\n                                                        3,\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 85,\n                                                    row_end: Some(\n                                                        85,\n                                                    ),\n                                                    col_start: 31,\n                                                    col_end: Some(\n                                                        32,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    ),\n                                    span: Span {\n                                        row_start: 85,\n                                        row_end: None,\n                                        col_start: 24,\n                                        col_end: None,\n                                    },\n                                },\n                                ExpressionNode {\n                                    kind: Identifier(\n                                        \"square\",\n                                    ),\n                                    span: Span {\n                                        row_start: 85,\n                                        row_end: Some(\n                                            85,\n                                        ),\n                                        col_start: 35,\n                                        col_end: Some(\n                                            41,\n                                        ),\n                                    },\n                                },\n                            ],\n                        },\n                        span: Span {\n                            row_start: 85,\n                            row_end: Some(\n                                85,\n                            ),\n                            col_start: 20,\n                            col_end: Some(\n                                23,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 85,\n                    row_end: Some(\n                        85,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        23,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: TypedDecl(\n                    \"val\",\n                    TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 87,\n                            row_end: Some(\n                                87,\n                            ),\n                            col_start: 5,\n                            col_end: Some(\n                                8,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Literal(\n                            Integer(\n                                10,\n                            ),\n                        ),\n                        span: Span {\n                            row_start: 87,\n                            row_end: Some(\n                                87,\n                            ),\n                            col_start: 15,\n                            col_end: Some(\n                                17,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 87,\n                    row_end: Some(\n                        87,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        17,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: AutoDecl(\n                    \"p\",\n                    TypeNode {\n                        kind: Auto,\n                        span: Span {\n                            row_start: 88,\n                            row_end: Some(\n                                88,\n                            ),\n                            col_start: 10,\n                            col_end: Some(\n                                11,\n                            ),\n                        },\n                    },\n                    ExpressionNode {\n                        kind: Unary {\n                            op: Ref,\n                            expr: ExpressionNode {\n                                kind: Identifier(\n                                    \"val\",\n                                ),\n                                span: Span {\n                                    row_start: 88,\n                                    row_end: Some(\n                                        88,\n                                    ),\n                                    col_start: 15,\n                                    col_end: Some(\n                                        18,\n                                    ),\n                                },\n                            },\n                            postfix: false,\n                        },\n                        span: Span {\n                            row_start: 88,\n                            row_end: Some(\n                                88,\n                            ),\n                            col_start: 14,\n                            col_end: Some(\n                                18,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 88,\n                    row_end: Some(\n                        88,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        18,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Expression(\n                    ExpressionNode {\n                        kind: Binary {\n                            left: ExpressionNode {\n                                kind: Unary {\n                                    op: Deref,\n                                    expr: ExpressionNode {\n                                        kind: Identifier(\n                                            \"p\",\n                                        ),\n                                        span: Span {\n                                            row_start: 89,\n                                            row_end: Some(\n                                                89,\n                                            ),\n                                            col_start: 6,\n                                            col_end: Some(\n                                                7,\n                                            ),\n                                        },\n                                    },\n                                    postfix: false,\n                                },\n                                span: Span {\n                                    row_start: 89,\n                                    row_end: Some(\n                                        89,\n                                    ),\n                                    col_start: 5,\n                                    col_end: Some(\n                                        7,\n                                    ),\n                                },\n                            },\n                            op: Assign,\n                            right: ExpressionNode {\n                                kind: Literal(\n                                    Integer(\n                                        20,\n                                    ),\n                                ),\n                                span: Span {\n                                    row_start: 89,\n                                    row_end: Some(\n                                        89,\n                                    ),\n                                    col_start: 10,\n                                    col_end: Some(\n                                        12,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 89,\n                            row_end: Some(\n                                89,\n                            ),\n                            col_start: 5,\n                            col_end: Some(\n                                12,\n                            ),\n                        },\n                    },\n                ),\n                span: Span {\n                    row_start: 89,\n                    row_end: Some(\n                        89,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        12,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 45,\n            row_end: Some(\n                89,\n            ),\n            col_start: 1,\n            col_end: Some(\n                12,\n            ),\n        },\n    },\n)\n\n"
