---
source: tests/parser_integration.rs
expression: ast_string
---
"Statement(\n    StatementNode {\n        kind: Import {\n            module_path: \"std.print\",\n            alias: None,\n        },\n        span: Span {\n            row_start: 1,\n            row_end: Some(\n                1,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Import {\n            module_path: \"std.Some\",\n            alias: None,\n        },\n        span: Span {\n            row_start: 2,\n            row_end: Some(\n                2,\n            ),\n            col_start: 2,\n            col_end: Some(\n                8,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Import {\n            module_path: \"std.Err\",\n            alias: None,\n        },\n        span: Span {\n            row_start: 3,\n            row_end: Some(\n                3,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Import {\n            module_path: \"std.Ok\",\n            alias: None,\n        },\n        span: Span {\n            row_start: 4,\n            row_end: Some(\n                4,\n            ),\n            col_start: 1,\n            col_end: Some(\n                7,\n            ),\n        },\n    },\n)\n\nFunction(\n    FunctionNode {\n        name: \"divide\",\n        type_params: [],\n        params: [\n            Param {\n                name: \"a\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Int,\n                    ),\n                    span: Span {\n                        row_start: 6,\n                        row_end: Some(\n                            6,\n                        ),\n                        col_start: 13,\n                        col_end: Some(\n                            16,\n                        ),\n                    },\n                },\n            },\n            Param {\n                name: \"b\",\n                type_: TypeNode {\n                    kind: Primitive(\n                        Int,\n                    ),\n                    span: Span {\n                        row_start: 6,\n                        row_end: Some(\n                            6,\n                        ),\n                        col_start: 20,\n                        col_end: Some(\n                            23,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Named(\n                \"Result\",\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 6,\n                            row_end: Some(\n                                6,\n                            ),\n                            col_start: 42,\n                            col_end: Some(\n                                45,\n                            ),\n                        },\n                    },\n                    TypeNode {\n                        kind: Primitive(\n                            Str,\n                        ),\n                        span: Span {\n                            row_start: 6,\n                            row_end: Some(\n                                6,\n                            ),\n                            col_start: 47,\n                            col_end: Some(\n                                53,\n                            ),\n                        },\n                    },\n                ],\n            ),\n            span: Span {\n                row_start: 6,\n                row_end: Some(\n                    6,\n                ),\n                col_start: 35,\n                col_end: Some(\n                    41,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: If {\n                    cond: ExpressionNode {\n                        kind: Binary {\n                            left: ExpressionNode {\n                                kind: Identifier(\n                                    \"b\",\n                                ),\n                                span: Span {\n                                    row_start: 7,\n                                    row_end: Some(\n                                        7,\n                                    ),\n                                    col_start: 8,\n                                    col_end: Some(\n                                        9,\n                                    ),\n                                },\n                            },\n                            op: Equal,\n                            right: ExpressionNode {\n                                kind: Literal(\n                                    Integer(\n                                        0,\n                                    ),\n                                ),\n                                span: Span {\n                                    row_start: 7,\n                                    row_end: Some(\n                                        7,\n                                    ),\n                                    col_start: 13,\n                                    col_end: Some(\n                                        14,\n                                    ),\n                                },\n                            },\n                        },\n                        span: Span {\n                            row_start: 7,\n                            row_end: Some(\n                                7,\n                            ),\n                            col_start: 8,\n                            col_end: Some(\n                                14,\n                            ),\n                        },\n                    },\n                    then_block: [\n                        StatementNode {\n                            kind: Return(\n                                Some(\n                                    ExpressionNode {\n                                        kind: Call {\n                                            func: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"Err\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 7,\n                                                    row_end: Some(\n                                                        7,\n                                                    ),\n                                                    col_start: 24,\n                                                    col_end: Some(\n                                                        27,\n                                                    ),\n                                                },\n                                            },\n                                            args: [\n                                                ExpressionNode {\n                                                    kind: Literal(\n                                                        String(\n                                                            \"Division by zero\",\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 7,\n                                                        row_end: Some(\n                                                            7,\n                                                        ),\n                                                        col_start: 28,\n                                                        col_end: Some(\n                                                            46,\n                                                        ),\n                                                    },\n                                                },\n                                            ],\n                                        },\n                                        span: Span {\n                                            row_start: 7,\n                                            row_end: Some(\n                                                7,\n                                            ),\n                                            col_start: 24,\n                                            col_end: Some(\n                                                27,\n                                            ),\n                                        },\n                                    },\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 7,\n                                row_end: Some(\n                                    7,\n                                ),\n                                col_start: 24,\n                                col_end: Some(\n                                    27,\n                                ),\n                            },\n                        },\n                    ],\n                    else_block: None,\n                },\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        27,\n                    ),\n                },\n            },\n            StatementNode {\n                kind: Return(\n                    Some(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"Ok\",\n                                    ),\n                                    span: Span {\n                                        row_start: 8,\n                                        row_end: Some(\n                                            8,\n                                        ),\n                                        col_start: 12,\n                                        col_end: Some(\n                                            14,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Binary {\n                                            left: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"a\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 8,\n                                                    row_end: Some(\n                                                        8,\n                                                    ),\n                                                    col_start: 15,\n                                                    col_end: Some(\n                                                        16,\n                                                    ),\n                                                },\n                                            },\n                                            op: Divide,\n                                            right: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"b\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 8,\n                                                    row_end: Some(\n                                                        8,\n                                                    ),\n                                                    col_start: 19,\n                                                    col_end: Some(\n                                                        20,\n                                                    ),\n                                                },\n                                            },\n                                        },\n                                        span: Span {\n                                            row_start: 8,\n                                            row_end: Some(\n                                                8,\n                                            ),\n                                            col_start: 15,\n                                            col_end: Some(\n                                                20,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 8,\n                                row_end: Some(\n                                    8,\n                                ),\n                                col_start: 12,\n                                col_end: Some(\n                                    14,\n                                ),\n                            },\n                        },\n                    ),\n                ),\n                span: Span {\n                    row_start: 8,\n                    row_end: Some(\n                        8,\n                    ),\n                    col_start: 12,\n                    col_end: Some(\n                        14,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 6,\n            row_end: Some(\n                8,\n            ),\n            col_start: 1,\n            col_end: Some(\n                14,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: AutoDecl(\n            \"res\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        9,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"divide\",\n                        ),\n                        span: Span {\n                            row_start: 11,\n                            row_end: Some(\n                                11,\n                            ),\n                            col_start: 12,\n                            col_end: Some(\n                                18,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    10,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 19,\n                                col_end: Some(\n                                    21,\n                                ),\n                            },\n                        },\n                        ExpressionNode {\n                            kind: Literal(\n                                Integer(\n                                    2,\n                                ),\n                            ),\n                            span: Span {\n                                row_start: 11,\n                                row_end: Some(\n                                    11,\n                                ),\n                                col_start: 23,\n                                col_end: Some(\n                                    24,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 11,\n                    row_end: Some(\n                        11,\n                    ),\n                    col_start: 12,\n                    col_end: Some(\n                        18,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 11,\n            row_end: Some(\n                11,\n            ),\n            col_start: 1,\n            col_end: Some(\n                18,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Match {\n            expr: ExpressionNode {\n                kind: Identifier(\n                    \"res\",\n                ),\n                span: Span {\n                    row_start: 12,\n                    row_end: Some(\n                        12,\n                    ),\n                    col_start: 7,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n            arms: [\n                MatchArm {\n                    pattern: EnumVariant {\n                        name: \"Ok\",\n                        args: [\n                            Identifier(\n                                \"v\",\n                            ),\n                        ],\n                    },\n                    guard: None,\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"print\",\n                                            ),\n                                            span: Span {\n                                                row_start: 13,\n                                                row_end: Some(\n                                                    13,\n                                                ),\n                                                col_start: 13,\n                                                col_end: Some(\n                                                    18,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Binary {\n                                                    left: ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"Result: \",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 13,\n                                                            row_end: Some(\n                                                                13,\n                                                            ),\n                                                            col_start: 19,\n                                                            col_end: Some(\n                                                                29,\n                                                            ),\n                                                        },\n                                                    },\n                                                    op: Add,\n                                                    right: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"v\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 13,\n                                                            row_end: Some(\n                                                                13,\n                                                            ),\n                                                            col_start: 32,\n                                                            col_end: Some(\n                                                                33,\n                                                            ),\n                                                        },\n                                                    },\n                                                },\n                                                span: Span {\n                                                    row_start: 13,\n                                                    row_end: Some(\n                                                        13,\n                                                    ),\n                                                    col_start: 19,\n                                                    col_end: Some(\n                                                        33,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 13,\n                                        row_end: Some(\n                                            13,\n                                        ),\n                                        col_start: 13,\n                                        col_end: Some(\n                                            18,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 13,\n                                row_end: Some(\n                                    13,\n                                ),\n                                col_start: 13,\n                                col_end: Some(\n                                    18,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                MatchArm {\n                    pattern: EnumVariant {\n                        name: \"Err\",\n                        args: [\n                            Identifier(\n                                \"e\",\n                            ),\n                        ],\n                    },\n                    guard: None,\n                    body: [\n                        StatementNode {\n                            kind: Expression(\n                                ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: Identifier(\n                                                \"print\",\n                                            ),\n                                            span: Span {\n                                                row_start: 14,\n                                                row_end: Some(\n                                                    14,\n                                                ),\n                                                col_start: 14,\n                                                col_end: Some(\n                                                    19,\n                                                ),\n                                            },\n                                        },\n                                        args: [\n                                            ExpressionNode {\n                                                kind: Binary {\n                                                    left: ExpressionNode {\n                                                        kind: Literal(\n                                                            String(\n                                                                \"Error: \",\n                                                            ),\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 14,\n                                                            row_end: Some(\n                                                                14,\n                                                            ),\n                                                            col_start: 20,\n                                                            col_end: Some(\n                                                                29,\n                                                            ),\n                                                        },\n                                                    },\n                                                    op: Add,\n                                                    right: ExpressionNode {\n                                                        kind: Identifier(\n                                                            \"e\",\n                                                        ),\n                                                        span: Span {\n                                                            row_start: 14,\n                                                            row_end: Some(\n                                                                14,\n                                                            ),\n                                                            col_start: 32,\n                                                            col_end: Some(\n                                                                33,\n                                                            ),\n                                                        },\n                                                    },\n                                                },\n                                                span: Span {\n                                                    row_start: 14,\n                                                    row_end: Some(\n                                                        14,\n                                                    ),\n                                                    col_start: 20,\n                                                    col_end: Some(\n                                                        33,\n                                                    ),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    span: Span {\n                                        row_start: 14,\n                                        row_end: Some(\n                                            14,\n                                        ),\n                                        col_start: 14,\n                                        col_end: Some(\n                                            19,\n                                        ),\n                                    },\n                                },\n                            ),\n                            span: Span {\n                                row_start: 14,\n                                row_end: Some(\n                                    14,\n                                ),\n                                col_start: 14,\n                                col_end: Some(\n                                    19,\n                                ),\n                            },\n                        },\n                    ],\n                },\n            ],\n        },\n        span: Span {\n            row_start: 12,\n            row_end: Some(\n                12,\n            ),\n            col_start: 7,\n            col_end: Some(\n                10,\n            ),\n        },\n    },\n)\n\nFunction(\n    FunctionNode {\n        name: \"findEven\",\n        type_params: [],\n        params: [\n            Param {\n                name: \"nums\",\n                type_: TypeNode {\n                    kind: List(\n                        TypeNode {\n                            kind: Primitive(\n                                Int,\n                            ),\n                            span: Span {\n                                row_start: 17,\n                                row_end: Some(\n                                    17,\n                                ),\n                                col_start: 20,\n                                col_end: Some(\n                                    23,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 17,\n                        row_end: Some(\n                            17,\n                        ),\n                        col_start: 15,\n                        col_end: Some(\n                            19,\n                        ),\n                    },\n                },\n            },\n        ],\n        return_type: TypeNode {\n            kind: Named(\n                \"Optional\",\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 17,\n                            row_end: Some(\n                                17,\n                            ),\n                            col_start: 48,\n                            col_end: Some(\n                                51,\n                            ),\n                        },\n                    },\n                ],\n            ),\n            span: Span {\n                row_start: 17,\n                row_end: Some(\n                    17,\n                ),\n                col_start: 39,\n                col_end: Some(\n                    47,\n                ),\n            },\n        },\n        body: [\n            StatementNode {\n                kind: For {\n                    var: \"n\",\n                    var_type: TypeNode {\n                        kind: Primitive(\n                            Int,\n                        ),\n                        span: Span {\n                            row_start: 18,\n                            row_end: Some(\n                                18,\n                            ),\n                            col_start: 9,\n                            col_end: Some(\n                                12,\n                            ),\n                        },\n                    },\n                    iter: ExpressionNode {\n                        kind: Identifier(\n                            \"nums\",\n                        ),\n                        span: Span {\n                            row_start: 18,\n                            row_end: Some(\n                                18,\n                            ),\n                            col_start: 18,\n                            col_end: Some(\n                                22,\n                            ),\n                        },\n                    },\n                    body: [\n                        StatementNode {\n                            kind: If {\n                                cond: ExpressionNode {\n                                    kind: Binary {\n                                        left: ExpressionNode {\n                                            kind: Binary {\n                                                left: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"n\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 18,\n                                                        row_end: Some(\n                                                            18,\n                                                        ),\n                                                        col_start: 28,\n                                                        col_end: Some(\n                                                            29,\n                                                        ),\n                                                    },\n                                                },\n                                                op: Modulo,\n                                                right: ExpressionNode {\n                                                    kind: Literal(\n                                                        Integer(\n                                                            2,\n                                                        ),\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 18,\n                                                        row_end: Some(\n                                                            18,\n                                                        ),\n                                                        col_start: 32,\n                                                        col_end: Some(\n                                                            33,\n                                                        ),\n                                                    },\n                                                },\n                                            },\n                                            span: Span {\n                                                row_start: 18,\n                                                row_end: Some(\n                                                    18,\n                                                ),\n                                                col_start: 28,\n                                                col_end: Some(\n                                                    33,\n                                                ),\n                                            },\n                                        },\n                                        op: Equal,\n                                        right: ExpressionNode {\n                                            kind: Literal(\n                                                Integer(\n                                                    0,\n                                                ),\n                                            ),\n                                            span: Span {\n                                                row_start: 18,\n                                                row_end: Some(\n                                                    18,\n                                                ),\n                                                col_start: 37,\n                                                col_end: Some(\n                                                    38,\n                                                ),\n                                            },\n                                        },\n                                    },\n                                    span: Span {\n                                        row_start: 18,\n                                        row_end: Some(\n                                            18,\n                                        ),\n                                        col_start: 28,\n                                        col_end: Some(\n                                            38,\n                                        ),\n                                    },\n                                },\n                                then_block: [\n                                    StatementNode {\n                                        kind: Return(\n                                            Some(\n                                                ExpressionNode {\n                                                    kind: Call {\n                                                        func: ExpressionNode {\n                                                            kind: Identifier(\n                                                                \"Some\",\n                                                            ),\n                                                            span: Span {\n                                                                row_start: 18,\n                                                                row_end: Some(\n                                                                    18,\n                                                                ),\n                                                                col_start: 48,\n                                                                col_end: Some(\n                                                                    52,\n                                                                ),\n                                                            },\n                                                        },\n                                                        args: [\n                                                            ExpressionNode {\n                                                                kind: Identifier(\n                                                                    \"n\",\n                                                                ),\n                                                                span: Span {\n                                                                    row_start: 18,\n                                                                    row_end: Some(\n                                                                        18,\n                                                                    ),\n                                                                    col_start: 53,\n                                                                    col_end: Some(\n                                                                        54,\n                                                                    ),\n                                                                },\n                                                            },\n                                                        ],\n                                                    },\n                                                    span: Span {\n                                                        row_start: 18,\n                                                        row_end: Some(\n                                                            18,\n                                                        ),\n                                                        col_start: 48,\n                                                        col_end: Some(\n                                                            52,\n                                                        ),\n                                                    },\n                                                },\n                                            ),\n                                        ),\n                                        span: Span {\n                                            row_start: 18,\n                                            row_end: Some(\n                                                18,\n                                            ),\n                                            col_start: 48,\n                                            col_end: Some(\n                                                52,\n                                            ),\n                                        },\n                                    },\n                                ],\n                                else_block: None,\n                            },\n                            span: Span {\n                                row_start: 18,\n                                row_end: Some(\n                                    18,\n                                ),\n                                col_start: 25,\n                                col_end: Some(\n                                    52,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 18,\n                    row_end: Some(\n                        18,\n                    ),\n                    col_start: 9,\n                    col_end: Some(\n                        52,\n                    ),\n                },\n            },\n        ],\n        span: Span {\n            row_start: 17,\n            row_end: Some(\n                18,\n            ),\n            col_start: 1,\n            col_end: Some(\n                52,\n            ),\n        },\n    },\n)\n\n"
