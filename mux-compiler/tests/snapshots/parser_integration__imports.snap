---
source: mux-compiler/tests/parser_integration.rs
assertion_line: 83
expression: ast_string
---
"Statement(\n    StatementNode {\n        kind: AutoDecl(\n            \"pi\",\n            TypeNode {\n                kind: Auto,\n                span: Span {\n                    row_start: 2,\n                    row_end: Some(\n                        2,\n                    ),\n                    col_start: 6,\n                    col_end: Some(\n                        8,\n                    ),\n                },\n            },\n            ExpressionNode {\n                kind: Literal(\n                    Float(\n                        3.14159,\n                    ),\n                ),\n                span: Span {\n                    row_start: 2,\n                    row_end: Some(\n                        2,\n                    ),\n                    col_start: 11,\n                    col_end: Some(\n                        18,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 2,\n            row_end: Some(\n                2,\n            ),\n            col_start: 1,\n            col_end: Some(\n                18,\n            ),\n        },\n    },\n)\n\nStatement(\n    StatementNode {\n        kind: Expression(\n            ExpressionNode {\n                kind: Call {\n                    func: ExpressionNode {\n                        kind: Identifier(\n                            \"print\",\n                        ),\n                        span: Span {\n                            row_start: 3,\n                            row_end: Some(\n                                3,\n                            ),\n                            col_start: 1,\n                            col_end: Some(\n                                6,\n                            ),\n                        },\n                    },\n                    args: [\n                        ExpressionNode {\n                            kind: Binary {\n                                left: ExpressionNode {\n                                    kind: Literal(\n                                        String(\n                                            \"PI = \",\n                                        ),\n                                    ),\n                                    span: Span {\n                                        row_start: 3,\n                                        row_end: Some(\n                                            3,\n                                        ),\n                                        col_start: 7,\n                                        col_end: Some(\n                                            14,\n                                        ),\n                                    },\n                                },\n                                op: Add,\n                                right: ExpressionNode {\n                                    kind: Call {\n                                        func: ExpressionNode {\n                                            kind: FieldAccess {\n                                                expr: ExpressionNode {\n                                                    kind: Identifier(\n                                                        \"pi\",\n                                                    ),\n                                                    span: Span {\n                                                        row_start: 3,\n                                                        row_end: Some(\n                                                            3,\n                                                        ),\n                                                        col_start: 17,\n                                                        col_end: Some(\n                                                            19,\n                                                        ),\n                                                    },\n                                                },\n                                                field: \"to_string\",\n                                            },\n                                            span: Span {\n                                                row_start: 3,\n                                                row_end: Some(\n                                                    3,\n                                                ),\n                                                col_start: 17,\n                                                col_end: Some(\n                                                    29,\n                                                ),\n                                            },\n                                        },\n                                        args: [],\n                                    },\n                                    span: Span {\n                                        row_start: 3,\n                                        row_end: Some(\n                                            3,\n                                        ),\n                                        col_start: 17,\n                                        col_end: Some(\n                                            29,\n                                        ),\n                                    },\n                                },\n                            },\n                            span: Span {\n                                row_start: 3,\n                                row_end: Some(\n                                    3,\n                                ),\n                                col_start: 7,\n                                col_end: Some(\n                                    29,\n                                ),\n                            },\n                        },\n                    ],\n                },\n                span: Span {\n                    row_start: 3,\n                    row_end: Some(\n                        3,\n                    ),\n                    col_start: 1,\n                    col_end: Some(\n                        6,\n                    ),\n                },\n            },\n        ),\n        span: Span {\n            row_start: 3,\n            row_end: Some(\n                3,\n            ),\n            col_start: 1,\n            col_end: Some(\n                6,\n            ),\n        },\n    },\n)\n\n"
