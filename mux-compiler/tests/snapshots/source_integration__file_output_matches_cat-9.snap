---
source: tests/source_integration.rs
expression: "format!(\"{:#?}\", expected)"
---
"import math\nimport utils.logger as _\n// TODO: not sure this is what i want but for now with semantic analysis, this is what we will do\nimport std.Some\nimport std.print\n import std.None\nimport std.pi\n import std.Err\n import std.list\nimport std.Ok\n\nconst int MAX = 100\nauto flt = 7.82\nauto message = \"Mux Parser Test\"\n\nenum Shape { Circle(float radius), Rectangle(float width, float height), Square(float size) }\n\ninterface Drawable { func draw() returns void }\n\nclass Circle is Drawable, ShapeLike {\n    float radius\n    func draw() returns void { print(\"Circle radius=\" + radius) }\n    func area() returns float { return pi * radius * radius }\n    func resize(float newRadius, string _) returns void { radius = newRadius }\n}\n\nfunc max<T is comparable>(T a, T b) returns T { if a > b { return a } return b }\nclass Stack<T> {\n    list<T> items\n    func push(T item) returns void { items.append(item) }\n    func pop() returns Optional<T> {\n        if items.isEmpty() { return None }\n        return Some(items.removeLast())\n    }\n}\n\nfunc divide(int a, int b) returns Result<int, string> {\n    if b == 0 { return Err(\"Division by zero\") }\n    return Ok(a / b)\n}\nfunc findEven(list<int> nums) returns Optional<int> {\n    for int n in nums { if n % 2 == 0 { return Some(n) } }\n}\n\nfunc map<T, U>(list<T> items, func(T) returns U transform) returns list<U> {\n    auto out = list<U>.new()\n    for U item in items { out.append(transform(item)) }\n    return out\n}\n\nfunc main() returns void {\n    auto explicit = 10\n    auto inferred = 42\n    auto floatVal = 9.4\n\n    if inferred > 40 { print(\"Big number\") } else { print(\"Small number\") }\n\n    auto maybeNum = Some(15)\n    match maybeNum {\n        Some(v) if v > 10 { print(\"Large value: \" + v) }\n        Some(v) { print(\"Small value: \" + v) }\n        None { print(\"No value\") }\n        _ { print(\"Unexpected\") }\n    }\n\n    auto nums = [1, 2, 3]\n    auto cirs = [Circle(2.0), Circle(3.5)]\n    for Circle c in cirs { c.draw() }\n\n    auto maximum = max(7, 12)\n    auto stack = Stack<int>()\n    stack.push(99)\n    auto popped = stack.pop()\n\n    auto res = divide(10, 2)\n    match res { Ok(v) { print(v) } Err(e) { print(e) } }\n    match res {\n        Ok(v) {\n            print(\"got a good val\")\n        }\n        Err(e) {\n            print(\"got a bad val\")\n        }\n    }\n\n    auto maybeEven = findEven([1, 3, 4, 7])\n    match maybeEven { Some(v) { print(v) } None { print(\"None\") } }\n\n    auto square = func(int n) returns int { return n * n }\n    auto doubled = map([1, 2, 3], func(int x) returns int { return x * 2 })\n    auto squared = map([1, 2, 3], square)\n\n    int val = 10\n    auto p = &val\n    *p = 20\n}\n"
