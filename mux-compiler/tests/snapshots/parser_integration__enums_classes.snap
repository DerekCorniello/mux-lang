---
source: tests/parser_integration.rs
expression: ast_string
---
"Enum {\n    name: \"Shape\",\n    type_params: [],\n    variants: [\n        EnumVariant {\n            name: \"Circle\",\n            data: Some(\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 2,\n                            row_end: Some(\n                                2,\n                            ),\n                            col_start: 21,\n                            col_end: Some(\n                                26,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n        EnumVariant {\n            name: \"Rectangle\",\n            data: Some(\n                [\n                    TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 2,\n                            row_end: Some(\n                                2,\n                            ),\n                            col_start: 41,\n                            col_end: Some(\n                                46,\n                            ),\n                        },\n                    },\n                    TypeNode {\n                        kind: Primitive(\n                            Float,\n                        ),\n                        span: Span {\n                            row_start: 2,\n                            row_end: Some(\n                                2,\n                            ),\n                            col_start: 50,\n                            col_end: Some(\n                                55,\n                            ),\n                        },\n                    },\n                ],\n            ),\n        },\n    ],\n    span: Span {\n        row_start: 2,\n        row_end: Some(\n            2,\n        ),\n        col_start: 1,\n        col_end: Some(\n            5,\n        ),\n    },\n}\n\nInterface {\n    name: \"Drawable\",\n    type_params: [],\n    methods: [\n        FunctionNode {\n            name: \"draw\",\n            type_params: [],\n            params: [],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Void,\n                ),\n                span: Span {\n                    row_start: 4,\n                    row_end: Some(\n                        4,\n                    ),\n                    col_start: 42,\n                    col_end: Some(\n                        46,\n                    ),\n                },\n            },\n            body: [],\n            span: Span {\n                row_start: 4,\n                row_end: Some(\n                    4,\n                ),\n                col_start: 1,\n                col_end: Some(\n                    10,\n                ),\n            },\n        },\n    ],\n    span: Span {\n        row_start: 4,\n        row_end: Some(\n            4,\n        ),\n        col_start: 1,\n        col_end: Some(\n            10,\n        ),\n    },\n}\n\nClass {\n    name: \"Circle\",\n    type_params: [],\n    traits: [\n        TraitRef {\n            name: \"Drawable\",\n            type_args: [],\n        },\n    ],\n    fields: [\n        Field {\n            name: \"radius\",\n            type_: TypeNode {\n                kind: Primitive(\n                    Float,\n                ),\n                span: Span {\n                    row_start: 7,\n                    row_end: Some(\n                        7,\n                    ),\n                    col_start: 5,\n                    col_end: Some(\n                        10,\n                    ),\n                },\n            },\n        },\n    ],\n    methods: [\n        FunctionNode {\n            name: \"draw\",\n            type_params: [],\n            params: [],\n            return_type: TypeNode {\n                kind: Primitive(\n                    Void,\n                ),\n                span: Span {\n                    row_start: 8,\n                    row_end: Some(\n                        8,\n                    ),\n                    col_start: 25,\n                    col_end: Some(\n                        29,\n                    ),\n                },\n            },\n            body: [\n                StatementNode {\n                    kind: Expression(\n                        ExpressionNode {\n                            kind: Call {\n                                func: ExpressionNode {\n                                    kind: Identifier(\n                                        \"print\",\n                                    ),\n                                    span: Span {\n                                        row_start: 8,\n                                        row_end: Some(\n                                            8,\n                                        ),\n                                        col_start: 32,\n                                        col_end: Some(\n                                            37,\n                                        ),\n                                    },\n                                },\n                                args: [\n                                    ExpressionNode {\n                                        kind: Binary {\n                                            left: ExpressionNode {\n                                                kind: Literal(\n                                                    String(\n                                                        \"Circle radius=\",\n                                                    ),\n                                                ),\n                                                span: Span {\n                                                    row_start: 8,\n                                                    row_end: Some(\n                                                        8,\n                                                    ),\n                                                    col_start: 38,\n                                                    col_end: Some(\n                                                        54,\n                                                    ),\n                                                },\n                                            },\n                                            op: Add,\n                                            right: ExpressionNode {\n                                                kind: Identifier(\n                                                    \"radius\",\n                                                ),\n                                                span: Span {\n                                                    row_start: 8,\n                                                    row_end: Some(\n                                                        8,\n                                                    ),\n                                                    col_start: 57,\n                                                    col_end: Some(\n                                                        63,\n                                                    ),\n                                                },\n                                            },\n                                        },\n                                        span: Span {\n                                            row_start: 8,\n                                            row_end: Some(\n                                                8,\n                                            ),\n                                            col_start: 38,\n                                            col_end: Some(\n                                                63,\n                                            ),\n                                        },\n                                    },\n                                ],\n                            },\n                            span: Span {\n                                row_start: 8,\n                                row_end: Some(\n                                    8,\n                                ),\n                                col_start: 32,\n                                col_end: Some(\n                                    37,\n                                ),\n                            },\n                        },\n                    ),\n                    span: Span {\n                        row_start: 8,\n                        row_end: Some(\n                            8,\n                        ),\n                        col_start: 32,\n                        col_end: Some(\n                            37,\n                        ),\n                    },\n                },\n            ],\n            span: Span {\n                row_start: 8,\n                row_end: Some(\n                    8,\n                ),\n                col_start: 5,\n                col_end: Some(\n                    37,\n                ),\n            },\n        },\n    ],\n    span: Span {\n        row_start: 6,\n        row_end: Some(\n            6,\n        ),\n        col_start: 1,\n        col_end: Some(\n            6,\n        ),\n    },\n}\n\n"
